<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>circularspace</title><link href="https://mindriot101.github.io/" rel="alternate"></link><link href="https://mindriot101.github.io/feeds/tag_vim.xml" rel="self"></link><id>https://mindriot101.github.io/</id><updated>2013-09-05T15:44:00+02:00</updated><entry><title>vim crashing with ruby on OSX</title><link href="https://mindriot101.github.io/blog/2013/09/05/vim-crashing-with-ruby-on-osx/" rel="alternate"></link><updated>2013-09-05T15:44:00+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2013-09-05:blog/2013/09/05/vim-crashing-with-ruby-on-osx/</id><summary type="html">&lt;p&gt;I started having trouble with vim crashing for me. I'm on OSX with homebrew and rbenv, and it crashed when editing Ruby files. I would get a segmentation fault. &lt;/p&gt;
&lt;p&gt;After some googling which was not particularly fruitful, the solution I came up with was:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;switch to the system ruby &lt;code&gt;rbenv shell system&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;uninstall vim completely with homebrew &lt;code&gt;brew uninstall vim&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;reinstall vim from head &lt;code&gt;brew install --HEAD --override-system-vi vim&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This seems to have fixed the problem, though I do not know if it was switching to the system ruby or installing from head. This may require extra study which I do not have time to do now.&lt;/p&gt;</summary><category term="osx"></category><category term="vim"></category><category term="ruby"></category></entry><entry><title>The :Explore command in vim</title><link href="https://mindriot101.github.io/blog/2013/05/20/the-explore-command-in-vim/" rel="alternate"></link><updated>2013-05-20T00:00:00+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2013-05-20:blog/2013/05/20/the-explore-command-in-vim/</id><summary type="html">&lt;p&gt;In &lt;code&gt;vim&lt;/code&gt; a useful command is the &lt;code&gt;:Explore&lt;/code&gt;, which opens the netrw browser at the location of the current file. This is especially handy for editing files over &lt;code&gt;ssh&lt;/code&gt;, but is handy for those who don't like the file tree type plugins.&lt;/p&gt;
&lt;p&gt;The command can be shortened to &lt;code&gt;:E&lt;/code&gt; which is fantastic, quickly browse the file system inside vim.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;&lt;img alt="editing" src="{{" title="site.url }}/assets/images/editing-file.png" /&gt;&lt;/p&gt;
&lt;p&gt;This shows this current file in my editor. By pressing &lt;code&gt;:E&lt;/code&gt; we get&lt;/p&gt;
&lt;p&gt;&lt;img alt="local" src="{{" title="site.url }}/assets/images/local-contents.png" /&gt;&lt;/p&gt;
&lt;p&gt;and by selecting &lt;code&gt;..&lt;/code&gt; twice I get the top level of this blog&lt;/p&gt;
&lt;p&gt;&lt;img alt="blog" src="{{" title="site.url }}/assets/images/blog-contents.png" /&gt;&lt;/p&gt;
&lt;p&gt;The usual vim search commands are available for finding files so I encourage you to check it out.&lt;/p&gt;</summary><category term="vim"></category></entry><entry><title>Vim is even more amazing than I first thought!</title><link href="https://mindriot101.github.io/blog/2012/06/08/vim-is-even-more-amazing-than-i-first-thought/" rel="alternate"></link><updated>2012-06-08T11:09:23+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2012-06-08:blog/2012/06/08/vim-is-even-more-amazing-than-i-first-thought/</id><summary type="html">&lt;p&gt;Just today thanks to this answer on SO, I realised that vim can automatically pipe text through a shell command.
Just think about that for a second
For a simple example you can write python code into a text file, and execute it which replaces the code with the result.&lt;/p&gt;
&lt;p&gt;for i in xrange(10):    print i&lt;/p&gt;
&lt;p&gt;Selecting this text with in visual mode (you should all know how to do this) and typing
!python
which will get replaced with
','!python
since youre in visual mode. This will replace the code written above with the numbers from 0 to 9.
This could even then be piped into eg. !sort -r to reverse the list.
A use Ive come up with is to pipe code into grep for data file formatting. Let me know any uses you have in the comments.&lt;/p&gt;</summary><category term="vim"></category></entry></feed>