<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>circularspace</title><link href="https://mindriot101.github.io/" rel="alternate"></link><link href="https://mindriot101.github.io/feeds/tag_vagrant.xml" rel="self"></link><id>https://mindriot101.github.io/</id><updated>2013-10-30T23:13:00+01:00</updated><entry><title>Puppet and vagrant</title><link href="https://mindriot101.github.io/blog/2013/10/30/puppet-and-vagrant/" rel="alternate"></link><updated>2013-10-30T23:13:00+01:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2013-10-30:blog/2013/10/30/puppet-and-vagrant/</id><summary type="html">&lt;p&gt;So I've been playing with &lt;a href="http://puppetlabs.com/"&gt;Puppet&lt;/a&gt; and &lt;a href="http://www.opscode.com/chef/"&gt;Chef&lt;/a&gt; for server provisioning. The two technologies attempt to fill the same, or at least similar tasks: managing system configuration. With &lt;a href="http://www.vagrantup.com/"&gt;Vagrant&lt;/a&gt;, testing these two systems has become extremely easy. Vagrant supports both methods for server provisioning and the turnaround time for the tests is extremely short.&lt;/p&gt;
&lt;p&gt;I have tried for quite a while to run chef on a system, to no avail. I've often found that an unexpected crash puts end to my testing, whereas the first times I tried puppet I achieved success. I also feel the declarative style with which the puppet modules are built really suits the problems that puppet solves.&lt;/p&gt;
&lt;p&gt;This post is less of a comparison of Chef vs Puppet, perhaps the first in a series comparing the two, but for now we start with Puppet.&lt;/p&gt;
&lt;h2&gt;Simple configuration&lt;/h2&gt;
&lt;p&gt;Tools used:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vagrant&lt;/li&gt;
&lt;li&gt;puppet&lt;/li&gt;
&lt;li&gt;librarian-puppet&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'm not going to go into details about the installation of the tools, apart from to say that vagrant is installed from the &lt;a href="http://vagrantup.com"&gt;vagrant website&lt;/a&gt; and puppet/librarian-puppet are installed as gems.&lt;/p&gt;
&lt;p&gt;A project can be completetly defined (for example for version control) in four files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Vagrantfile&lt;/li&gt;
&lt;li&gt;Puppetfile&lt;/li&gt;
&lt;li&gt;Gemfile&lt;/li&gt;
&lt;li&gt;manifests/default.pp (by convention)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The directory layout for the project, and what should be checked into version control is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;.
├── Gemfile
├── Puppetfile
├── Vagrantfile
└── manifests
    └── default.pp
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;Gemfile&lt;/code&gt; stores the ruby gem versions, the &lt;code&gt;Puppetfile&lt;/code&gt; sets the puppet modules, the &lt;code&gt;Vagrantfile&lt;/code&gt; configures the virtual machine and the &lt;code&gt;manifests/default.pp&lt;/code&gt; file defines the state of the virtual machine.&lt;/p&gt;
&lt;h3&gt;Gemfile&lt;/h3&gt;
&lt;p&gt;A simple portable gemfile stores the required gems (puppet and librarian-puppet) and gives the option to version them. An example gemfile is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://rubygems.org&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;librarian-puppet&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;puppet&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Vagrantfile&lt;/h3&gt;
&lt;p&gt;This is where the vagrant virtual machine configuration is stored. The operating system and provisioning settings are stored here. A minimal example is given below, and sets up the box to use (precise64) and configures the puppet provisioning.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="no"&gt;VAGRANTFILE_API_VERSION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;

&lt;span class="no"&gt;Vagrant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;VAGRANTFILE_API_VERSION&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;precise64&amp;quot;&lt;/span&gt;

  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;provision&lt;/span&gt; &lt;span class="ss"&gt;:puppet&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;puppet&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;puppet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manifests_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;manifests&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;puppet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manifest_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;default.pp&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;puppet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;module_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;modules&amp;quot;&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;librarian-puppet&lt;/h3&gt;
&lt;p&gt;A major part of development is the DRY principle, and applies to package configuration also. &lt;code&gt;librarian-puppet&lt;/code&gt; allows pre-build and tested modules to install common packages. Puppetlabs maintain a repository of modules at &lt;a href="https://forge.puppetlabs.com/"&gt;puppet forge&lt;/a&gt;, or on &lt;a href="http://www.github.com"&gt;github&lt;/a&gt; and these can be configured and managed through librarian-puppet. An example configuration is given below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;forge&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://forge.puppetlabs.com&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;mod&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;puppetlabs/stdlib&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;mod&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;puppetlabs/postgresql&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;mod&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;puppetlabs/apt&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where the &lt;code&gt;mod&lt;/code&gt; lines define the required modules with the author prefix, and the forge line defines the source. The syntax is remarkably similar to the Gemfile.&lt;/p&gt;
&lt;h3&gt;manifests/default.pp&lt;/h3&gt;
&lt;p&gt;This file describes the final configuration. I recommend following the &lt;a href="http://docs.puppetlabs.com/learning/index.html"&gt;official puppet tutorial&lt;/a&gt;, an example file which installs vim can be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;exec&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;apt-get update&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/bin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;vim&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;require&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;Exec&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;apt-get update&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;ensure&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;present&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;though this does not use the modules. These can be defined and configured by reopening the class declaration, e.g.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# Puppetfile&lt;/span&gt;
&lt;span class="n"&gt;mod&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;puppetlabs/postgresql&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# manifests/default.pp&lt;/span&gt;
&lt;span class="k"&gt;exec&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;apt-get update&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/bin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;vim&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;ensure&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;present&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;require&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;Exec&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;apt-get update&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;postgresql::client&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;require&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;Exec&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;apt-get update&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This configuration will install the &lt;code&gt;vim&lt;/code&gt; and &lt;code&gt;postgresql::client&lt;/code&gt; packages ensuring that &lt;code&gt;apt-get update&lt;/code&gt; has been run before.&lt;/p&gt;
&lt;h2&gt;Starting a project from scratch&lt;/h2&gt;
&lt;p&gt;These files can be initialised through three commands:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bundle init&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vagrant init&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;librarian-puppet init&lt;/code&gt;, &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;which are then configured to the users needs. Commands to run to create the full working system are&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;bundle install
bundle &lt;span class="nb"&gt;exec &lt;/span&gt;librarian-puppet install
vagrant up
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Simple eh? More documentation for these files can be found:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.vagrantup.com"&gt;http://www.vagrantup.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://puppetlabs.com/"&gt;http://puppetlabs.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.puppetlabs.com/learning/index.html"&gt;The excellent puppet tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://librarian-puppet.com/"&gt;librarian-puppet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="puppet"></category><category term="vagrant"></category><category term="devops"></category></entry></feed>