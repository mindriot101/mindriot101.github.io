<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>circularspace</title><link href="https://mindriot101.github.io/" rel="alternate"></link><link href="https://mindriot101.github.io/feeds/tag_rust.xml" rel="self"></link><id>https://mindriot101.github.io/</id><updated>2019-11-28T21:39:37+00:00</updated><entry><title>Rust in 2020</title><link href="https://mindriot101.github.io/blog/2019/11/28/rust-in-2020/" rel="alternate"></link><updated>2019-11-28T21:39:37+00:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2019-11-28:blog/2019/11/28/rust-in-2020/</id><summary type="html">&lt;p&gt;Wow what a year for Rust. 2019 has flown by (in real life as well), with so many
developments since the beginning of 2019. The 2018 edition has brought so many
quality of life improvements to day to day Rust development, particularly the
more intuitive module system, NLL, and proc-macros.&lt;/p&gt;
&lt;p&gt;Rust 2020 has a lot to live up to!&lt;/p&gt;
&lt;p&gt;Well...&lt;/p&gt;
&lt;p&gt;My thoughts for Rust 2020 are perhaps a little less aimed at new features I want
to see than some other roadmaps, but more towards continuing the quality of life
improvements, and expanding the ecosystem. My thoughts can be grouped into:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Simplicity&lt;/li&gt;
&lt;li&gt;A Greater Ecosystem&lt;/li&gt;
&lt;li&gt;Compile Time&lt;/li&gt;
&lt;li&gt;Misc&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Simplicity&lt;/h2&gt;
&lt;p&gt;Rust has never been a &lt;em&gt;very&lt;/em&gt; simple language. Not like go or C. Certainly not as
bad as C++. I enjoyed being a beginner in Rust, being helped&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; by the compiler
at every step. The language for a beginner was relatively simple: functions,
&lt;code&gt;struct&lt;/code&gt;s, &lt;code&gt;trait&lt;/code&gt;s and &lt;code&gt;enum&lt;/code&gt;s. This made for a very powerful language
(particularly the &lt;code&gt;enum&lt;/code&gt;s which are my favourite), yet a small surface area.&lt;/p&gt;
&lt;p&gt;As I moved on I started looking more at generics (coming from C++ this was not
too complex for me) and traits in greater detail, but it was still not
unsurmountable.&lt;/p&gt;
&lt;p&gt;When I look at Rust code today, I see quite a lot of intimidating complexity.
For example this function definition from &lt;a href="https://diesel.rs/"&gt;diesel&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Op&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Ret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;QueryFragment&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;InsertStatement&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Op&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Ret&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Backend&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;FromClause&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;QueryFragment&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;U&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;QueryFragment&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;CanInsertInSingleQuery&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Op&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;QueryFragment&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Ret&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;QueryFragment&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;DB&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or this seemingly magic incantation for command line parsing from
&lt;a href="https://github.com/killercup/cargo-edit/blob/77be59f1f03672211bbce4ab5ccbe264eb6b7a3d/src/bin/upgrade/main.rs#L69"&gt;cargo-edit&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#[derive(Debug, StructOpt)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Args&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c-Doc"&gt;/// Crates to be upgraded.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;dependency&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c-Doc"&gt;/// Path to the manifest to upgrade&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;#[structopt(long = &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;manifest-path&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;, value_name = &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;path&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;manifest_path&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;PathBuf&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c-Doc"&gt;/// Upgrade all packages in the workspace.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;#[structopt(long = &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;all&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c-Doc"&gt;/// Include prerelease versions when fetching from crates.io (e.g. 0.6.0-alpha&amp;#39;).&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;#[structopt(long = &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;allow-prerelease&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;allow_prerelease&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c-Doc"&gt;/// Print changes to be made without making them.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;#[structopt(long = &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;dry-run&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;dry_run&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c-Doc"&gt;/// Run without accessing the network&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;#[structopt(long = &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;offline&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;offline&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c-Doc"&gt;/// Upgrade all packages to the version in the lockfile.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;#[structopt(long = &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;to-lockfile&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;, conflicts_with = &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;dependency&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;)]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to_lockfile&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I'm not singling these crates out by any stretch. I also understand that the
trait bounds in the &lt;a href="https://diesel.rs/"&gt;diesel&lt;/a&gt; case enable a great amount of
power, and I admire the amount of clever code that is going on behind the scenes
of a crate like &lt;a href="https://crates.io/crates/structopt"&gt;structopt&lt;/a&gt;, but it is a lot
of additional boilerplate or magic.&lt;/p&gt;
&lt;p&gt;I think Rust inhabits a nice space in that it's not too simplistic to fail to
describe common problem domains in the type system in a satisfying and
reassuring way&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;, and it's not so complicated that is painful to read a page
of Rust code. I think for 2020 I'd like to ensure that this last point doesn't
happen. I'd like to see Rust be cautious in adding new sigils. The process from
explicit error handling -&amp;gt; &lt;code&gt;try!&lt;/code&gt; -&amp;gt; &lt;code&gt;?&lt;/code&gt; was excellent in my opinion&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;. It was
quite slow, and a &lt;em&gt;lot&lt;/em&gt; of input was gathered from the community&lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;My worry is that Rust will start including magic items and follow the path of
Haskell, where every library invents new operators (e.g. Parsec has &lt;code&gt;&amp;lt;|&amp;gt;&lt;/code&gt; and
&lt;code&gt;&amp;lt;?&amp;gt;&lt;/code&gt;, lens has &lt;code&gt;%%~&lt;/code&gt;, &lt;code&gt;^.&lt;/code&gt;) etc. This hides a lot of information from new
users.&lt;/p&gt;
&lt;p&gt;One area Rust shines in is documentation. A lot of this "magic" can be overcome
with good documentation and extensive examples.&lt;/p&gt;
&lt;h2&gt;A Greater Ecosystem&lt;/h2&gt;
&lt;p&gt;I come from a Python background. Due to it's long life has had a great ecosystem
developed around it, with stable mature packages. My background is in scientific
computing so it's great to have the pydata ecosystem to play with.&lt;/p&gt;
&lt;p&gt;I recognise that these packages have taken a long time to formalise. I started
working seriously with numerical Python around the time of &lt;code&gt;numpy&lt;/code&gt;'s unification
of the numerical Python libraries.&lt;/p&gt;
&lt;p&gt;I would love Rust to gain the stable and mature crates that it needs to be a
world-beating language. I love the way that Rust interfaces with C and has
really gained a lot of momentum wrapping existing code quickly.&lt;/p&gt;
&lt;p&gt;Part of this maturity and stability must come from consensus from the community.
I hate to see the fragmentation between different implementations of the same
thing (e.g. &lt;code&gt;async-std&lt;/code&gt;/&lt;code&gt;tokio&lt;/code&gt;, or
&lt;a href="https://github.com/tikv/grpc-rs"&gt;&lt;code&gt;grpcio&lt;/code&gt;&lt;/a&gt;/&lt;a href="https://crates.io/crates/grpc"&gt;&lt;code&gt;grpc&lt;/code&gt;&lt;/a&gt;).
From what I've seen, the usual progression is at least:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;sync crate&lt;/li&gt;
&lt;li&gt;async crate with &lt;code&gt;futures&lt;/code&gt; 0.1&lt;/li&gt;
&lt;li&gt;async crate with &lt;code&gt;async/await&lt;/code&gt;&lt;sup id="fnref:5"&gt;&lt;a class="footnote-ref" href="#fn:5" rel="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Again this must occur early as people experiment with different implementations
(and as mentioned during the latest &lt;a href="https://rustacean-station.org/episode/006-rust-1.39.0/"&gt;Rustacean Station
episode&lt;/a&gt;, Rust as a
low-level systems language often cannot force an implementation on people as
users have different constraints), but I'm looking forward to the time when I'm
looking for a crate and there is an obvious well-tested option that interfaces
with the rest of the crates well. I suppose this means my wish for Rust 2020 is
for it to skip 10 years. Should I just wait?&lt;/p&gt;
&lt;h2&gt;Compile Time&lt;/h2&gt;
&lt;p&gt;I am a huge fan of pushing "things" (functionality or error detection) to
compile time. Yes this adds to the compile time of Rust crates (which is a sore
point for many people, myself included) but the extra confidence gained from
knowing that if my code compiles it &lt;em&gt;probably&lt;/em&gt; works is a huge relief. I would
prefer to have a long compilation process in exchange for the constant threat of
runtime errors.&lt;/p&gt;
&lt;p&gt;I am a great fan of the compile time checks Rust already performs, and the type
systems which make modelling complex scenarios a breeze. I am very happy that
more and more is able to be &lt;code&gt;const&lt;/code&gt;, so calculated at compile time. I've been
watching &lt;a href="https://www.youtube.com/user/jblow888/feed"&gt;Jonathan Blow's screencasts on his new
language&lt;/a&gt; with great interest. He is
aiming for different trade-offs to Rust. His language is&lt;sup id="fnref:6"&gt;&lt;a class="footnote-ref" href="#fn:6" rel="footnote"&gt;6&lt;/a&gt;&lt;/sup&gt; &lt;em&gt;completely&lt;/em&gt;
interpretable so extremely capable at compile time code generation. The ability
to push computation to compile time and save valuable runtime resources is a
great benefit. I can see that benefiting systems built in Rust as well.&lt;/p&gt;
&lt;p&gt;I think, and will always think that the more effort that is put into compiler
warnings, lints and errors the happier I will feel. I'm really happy that this
is considered so highly within the Rust community (as is documentation
generally).&lt;/p&gt;
&lt;h2&gt;Misc&lt;/h2&gt;
&lt;p&gt;Here we have a grab-bag of items that are not worth separate headings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I'd love command-line documentation of items, ideally the same interface for
  stdlib and crates (as per &lt;code&gt;pydoc&lt;/code&gt;/&lt;code&gt;godoc&lt;/code&gt;). I'd love to work on this feature
  myself as it's so close to my heart.&lt;/li&gt;
&lt;li&gt;As mentioned before, compile times are always a problem.&lt;/li&gt;
&lt;li&gt;I would love to see some of the new error handling libraries make it into the
  standard library. I can see progress with e.g. &lt;code&gt;anyhow&lt;/code&gt;/&lt;code&gt;thiserror&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Wrap up&lt;/h1&gt;
&lt;p&gt;I know this post has been very contradictory. I want to have faster compile
times, yet push more complexity to the compiler and code analysis. I want to
have a stable ecosystem, but with a wide variety of functionality. I want to
have a simple yet extremely expressive and powerful language.&lt;/p&gt;
&lt;p&gt;I think this completely summarises engineering. Engineering is about choosing
the best trade-off between multiple solutions. Finding a middle ground.&lt;/p&gt;
&lt;p&gt;If any community can do this, the Rust community can.&lt;/p&gt;
&lt;p&gt;- Simon&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;helped is one way of putting it&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;https://golang.org/&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;https://thefeedbackloop.xyz/stroustrups-rule-and-layering-over-time/&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;another thing Rust is excellent with: getting community input on big&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:5"&gt;
&lt;p&gt;ok so this may be because of the excitement around async/await, hopefully
  we will be able to skip step 2 in the not-too-distant future.&amp;#160;&lt;a class="footnote-backref" href="#fnref:5" rev="footnote" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:6"&gt;
&lt;p&gt;afaik
  decisions.&amp;#160;&lt;a class="footnote-backref" href="#fnref:6" rev="footnote" title="Jump back to footnote 6 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="rust"></category><category term="rust2020"></category></entry><entry><title>Jupyter client library</title><link href="https://mindriot101.github.io/blog/2018/12/06/jupyter-client-library/" rel="alternate"></link><updated>2018-12-06T19:00:20+00:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2018-12-06:blog/2018/12/06/jupyter-client-library/</id><summary type="html">&lt;p&gt;&lt;strong&gt;TL;DR I have been thinking about alternative frontends to the Jupyter notebook. The first step is to abstract communications with Jupyter kernels. I have started writing one of these.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gitlab.com/srwalker101/rust-jupyter-client"&gt;Project repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.rs/jupyter-client/0.1.0/jupyter_client/"&gt;docs.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://crates.io/crates/jupyter-client"&gt;crates.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I am a huge fan of the Jupyter notebook environment. It is a fantastic way to explore a new data analysis approach, and keep results together with the implementation and explanation.&lt;/p&gt;
&lt;p&gt;I wanted to understand how the Jupyter notebook/lab frontend interacts with the Kernel backends, and as such have started writing a &lt;em&gt;client&lt;/em&gt; library.&lt;/p&gt;
&lt;h2&gt;Architecture&lt;/h2&gt;
&lt;p&gt;The Jupyter suite consists of two parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Frontend&lt;/li&gt;
&lt;li&gt;Kernel&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Within the frontend is typically a kernel communication abstraction component, what I call the "client":&lt;/p&gt;
&lt;p&gt;&lt;img alt="Jupyter schematic" src="https://mindriot101.github.io/images/jupyter_schematic.svg" /&gt;&lt;/p&gt;
&lt;p&gt;The frontend handles nicely presenting the execution results and collecting input from the user (i.e. the &lt;em&gt;notebook&lt;/em&gt;). The &lt;em&gt;kernel&lt;/em&gt; is the execution engine that can be written in many languages. The &lt;em&gt;client&lt;/em&gt; handles communicating with a kernel. It communicates over 4&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; ZeroMQ sockets:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shell&lt;/code&gt;: for client -&amp;gt; kernel requests (and responses)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iopub&lt;/code&gt;: for kernel -&amp;gt; client messages&lt;/li&gt;
&lt;li&gt;&lt;code&gt;heartbeat&lt;/code&gt;: for health checks&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stdin&lt;/code&gt;: for kernel -&amp;gt; client requests (and responses from the frontend)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This abstraction is what allows the frontend to communicate with different kernels.&lt;/p&gt;
&lt;h2&gt;Writing a client library&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://jupyter-client.readthedocs.io/en/stable/messaging.html#the-wire-protocol"&gt;documentation on the Jupyter wire protocol&lt;/a&gt; is pretty good at describing how messages are sent to and from the kernel over the "wire" (the various ZeroMQ sockets). This documentation was used to build a &lt;a href="https://gitlab.com/srwalker101/rust-jupyter-client/blob/b8c27ea2ca8b5a546fb59ed06c1d9a4e50575552/src/wire.rs#L17"&gt;&lt;code&gt;WireMessage&lt;/code&gt;&lt;/a&gt; abstraction, which:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;is created from a &lt;a href="https://docs.rs/jupyter-client/0.1.0/jupyter_client/commands/enum.Command.html"&gt;&lt;code&gt;Command&lt;/code&gt;&lt;/a&gt; enum variant (&lt;a href="https://gitlab.com/srwalker101/rust-jupyter-client/blob/b8c27ea2ca8b5a546fb59ed06c1d9a4e50575552/src/commands.rs#L135"&gt;conversion method&lt;/a&gt;),&lt;/li&gt;
&lt;li&gt;gets passed to a &lt;a href="https://gitlab.com/srwalker101/rust-jupyter-client/blob/b8c27ea2ca8b5a546fb59ed06c1d9a4e50575552/src/socket.rs#L15"&gt;&lt;code&gt;Socket&lt;/code&gt;&lt;/a&gt;; an abstraction around a ZeroMQ socket,&lt;/li&gt;
&lt;li&gt;gets sent over the wire to the kernel,&lt;/li&gt;
&lt;li&gt;a response is sent back and &lt;a href="https://gitlab.com/srwalker101/rust-jupyter-client/blob/b8c27ea2ca8b5a546fb59ed06c1d9a4e50575552/src/socket.rs#L58"&gt;converted to a &lt;code&gt;WireMessage&lt;/code&gt;&lt;/a&gt; (&lt;a href="https://gitlab.com/srwalker101/rust-jupyter-client/blob/b8c27ea2ca8b5a546fb59ed06c1d9a4e50575552/src/wire.rs#L26"&gt;conversion performed here&lt;/a&gt;),&lt;/li&gt;
&lt;li&gt;which is then &lt;a href="https://gitlab.com/srwalker101/rust-jupyter-client/blob/b8c27ea2ca8b5a546fb59ed06c1d9a4e50575552/src/wire.rs#L59"&gt;turned back into a &lt;code&gt;Response&lt;/code&gt; object&lt;/a&gt; and generally passed back to the user.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I hope that this library will form the beginning of a new Rust-based Jupyter frontend. I have some ideas but that's for another time.&lt;/p&gt;
&lt;h2&gt;Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gitlab.com/srwalker101/rust-jupyter-client"&gt;Project repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.rs/jupyter-client/0.1.0/jupyter_client/"&gt;docs.rs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://crates.io/crates/jupyter-client"&gt;crates.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jupyter-client.readthedocs.io/en/stable/messaging.html#the-wire-protocol"&gt;Description of the Jupyter wire protocol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://andrew.gibiansky.com/blog/ipython/ipython-kernels/"&gt;Creating language kernels for IPython&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Technically 5: a "control" socket is a duplicate of the "shell" socket but for high-priority messages.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="rust"></category></entry><entry><title>Emcee in Rust</title><link href="https://mindriot101.github.io/blog/2017/06/07/emcee-in-rust/" rel="alternate"></link><updated>2017-06-07T19:59:23+01:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2017-06-07:blog/2017/06/07/emcee-in-rust/</id><summary type="html">&lt;p&gt;I've been re-implementing the &lt;a href="https://dan.iel.fm/emcee/current/"&gt;Python &lt;code&gt;emcee&lt;/code&gt; library&lt;/a&gt; in Rust.&lt;/p&gt;
&lt;p&gt;I thought it would be a good project to tackle for a few reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I actively use it in my own work, and am reasonably familiar with the API and how it works&lt;/li&gt;
&lt;li&gt;it has few external dependencies and is mostly pure Python&lt;/li&gt;
&lt;li&gt;it performs cpu-limited computations which suit a compiled high performance language&lt;/li&gt;
&lt;li&gt;the Python version has parallelism to increase speed, which should be easily achievable with rust&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(We'll see that for the time being the last point has been put on hold.)&lt;/p&gt;
&lt;p&gt;After getting the project to feature parity, or at least for the major features are completed, I thought I'd reflect a little on the process, and differences in design between the Rust version and the Python version.&lt;/p&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;emcee&lt;/code&gt; is an Ensemble sampler for Markov-Chain Monte-Carlo (MCMC) processes. It uses a series of walkers to explore N-dimensional parameter space efficiently and without getting hung up on sharp local likelihood spikes.&lt;/p&gt;
&lt;p&gt;The API is very simple to use - you supply your "objective" function, a function to be maximised, and an array of starting points for each walker, and the sampler samples the parameter space. After the given number of iterations have been performed, the location in parameter space of each of the walkers at each iteration can be analysed to extract posterior distributions, find correlations between parameters, and visualise the process.&lt;/p&gt;
&lt;p&gt;The objective function encodes prior probabilities and likelihood values, as per &lt;a href="https://en.wikipedia.org/wiki/Bayes%27_theorem"&gt;Bayes' rule&lt;/a&gt;, which is applicable for problems in science as Bayesian statistics are my preferred way to describe probability. For more information on this topic, see Jake VanderPlas' &lt;a href="https://jakevdp.github.io/blog/2014/03/11/frequentism-and-bayesianism-a-practical-intro/"&gt;excellent series&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;The Rust version&lt;/h2&gt;
&lt;p&gt;When starting to write the sampler, I realised that due to Python's dynamic nature, the objective function and required arguments are quite dynamic. In Python the objective function is wrapped in a wrapper which stores the function arguments and keyword arguments so the function can be pickled and sent to other processes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_function_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    This is a hack to make the likelihood function pickleable when ``args``&lt;/span&gt;
&lt;span class="sd"&gt;    or ``kwargs`` are also included.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;traceback&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;emcee: Exception while calling your likelihood function:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;  params:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;  args:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;  kwargs:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;  exception:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;traceback&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_exc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://github.com/dfm/emcee/blob/7984142541bd907fc1ef74fb2c49b663bb9086f3/emcee/ensemble.py#L507"&gt;(link)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This dynamic wrapping of a function is not really supported in Rust, where everything must have a known type at compile time.&lt;/p&gt;
&lt;p&gt;Instead I used Rust's trait system to allow the user to supply their own objective function and for arguments to be stored with the objective &lt;code&gt;Struct&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;trait&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Prob&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lnlike&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Guess&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;f64&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lnprior&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Guess&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;f64&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lnprob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Guess&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;f64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lnp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lnprior&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lnp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_finite&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;lnp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lnlike&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="o"&gt;-::&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="kt"&gt;f64&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;INFINITY&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note the default implementation of Bayes' rule, which the user does not have to supply. I find this separation between prior probability and objective function helps understanding for new users, who hear about applying priors to MCMC analysis and are then asked to write a single function.&lt;/p&gt;
&lt;p&gt;Where Python defines external data when constructing the sampler, the Rust version allows the user to store any data on whatever struct implements &lt;code&gt;Prob&lt;/code&gt;, for example for a simple linear model:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LinearModel&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nl"&gt;&amp;#39;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;&amp;#39;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;f64&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;&amp;#39;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;f64&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nl"&gt;&amp;#39;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LinearModel&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nl"&gt;&amp;#39;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;&amp;#39;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;f64&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;&amp;#39;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;f64&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;LinearModel&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;impl&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nl"&gt;&amp;#39;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Prob&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LinearModel&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nl"&gt;&amp;#39;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lnprior&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;_params&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Guess&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;f64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="c1"&gt;// no prior information&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="k"&gt;f64&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lnlike&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Guess&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;f64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="k"&gt;f64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;model_value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;residual&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;model_value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;residual&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;powf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Problems encountered&lt;/h2&gt;
&lt;p&gt;Random floating point numbers are hard to work with! Despite leaning on the &lt;a href="https://crates.io/crates/assert_approx_eq"&gt;&lt;code&gt;assert_approx_eq&lt;/code&gt;&lt;/a&gt; crate which compares floating point numbers for &lt;em&gt;approximate&lt;/em&gt; equality, sometimes extra wide tolerances had to be used to get the numbers to compare.&lt;/p&gt;
&lt;p&gt;As alluded to earlier, I have not got parallelism working yet in the Rust implementation. To be fair, and as expected the sampler is much faster than it's python counterpart (once it's run in &lt;code&gt;release&lt;/code&gt; mode that is), but that is not very forward thinking.&lt;/p&gt;
&lt;p&gt;The Python implementation parallelises the application of the user's objective function to the vector of trial walker positions. The (usually correct) assumption is that the user's objective function is much slower than a single iteration of the sampler, and by it's nature the MCMC sampling algorithm is difficult to parallelise in general.&lt;/p&gt;
&lt;p&gt;I did struggle with parallelising in the same way, with both &lt;code&gt;threadpool&lt;/code&gt; and &lt;code&gt;rayon&lt;/code&gt;, due to borrowing and &lt;code&gt;Sync&lt;/code&gt; problems, but the performance is good for the time being. Should the library become popular (i.e. more than just me using it) and the need arise, I'll look into it again.&lt;/p&gt;
&lt;p&gt;On that note, the latest release has been tagged &lt;code&gt;1.0.0-alpha.1&lt;/code&gt; indicating that it's got the features I wish to add for a version 1 library, but needs more user testing.&lt;/p&gt;
&lt;p&gt;So if you're interested, please check out the library at &lt;a href="https://crates.io/crates/emcee"&gt;&lt;code&gt;https://crates.io/crates/emcee&lt;/code&gt;&lt;/a&gt; and read the &lt;a href="https://docs.rs/emcee/1.0.0-alpha.1/emcee/"&gt;documentation&lt;/a&gt;. I appreciate any feedback.&lt;/p&gt;</summary><category term="rust"></category></entry><entry><title>Installing rust on older linux systems</title><link href="https://mindriot101.github.io/blog/2016/06/15/installing-rust-on-older-linux-systems/" rel="alternate"></link><updated>2016-06-15T10:52:51+01:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2016-06-15:blog/2016/06/15/installing-rust-on-older-linux-systems/</id><summary type="html">&lt;p&gt;At work we use SLES 11 which has quite old versions of openssl and
installed certificates. I was getting certificate errors trying to
install rust with the &lt;a href="https://www.rustup.rs/"&gt;rustup&lt;/a&gt; tool. &lt;/p&gt;
&lt;p&gt;I tried searching for any help at all but in the end I followed the
following advice:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;download a more recent certificate bundle (e.g. from
&lt;a href="https://certifi.io/en/latest/"&gt;certifi&lt;/a&gt; or mozilla)&lt;/li&gt;
&lt;li&gt;set the environment variable &lt;code&gt;SSL_CERT_FILE&lt;/code&gt; to point to this new file&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This works for both &lt;code&gt;rustup&lt;/code&gt; and &lt;code&gt;cargo&lt;/code&gt; meaning I can develop with rust
on my work machine.&lt;/p&gt;</summary><category term="rust"></category></entry><entry><title>Fighting the compiler</title><link href="https://mindriot101.github.io/blog/2016/06/01/fighting-the-compiler/" rel="alternate"></link><updated>2016-06-01T08:40:18+01:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2016-06-01:blog/2016/06/01/fighting-the-compiler/</id><summary type="html">&lt;p&gt;I'm learning &lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt; at the moment, which I'm finding quite an interesting
challenge.  I agree with a lot of the Rust principles and find it extremely
comforting that the compiler has got my back, but it's bringing me back to my
early times learning C and "fighting with the compiler".&lt;/p&gt;
&lt;p&gt;How many hours did I spend adding "&amp;amp;" and "*" to variables to pass into
functions before I really understood what it meant for a function to take a
pointer? Simple rules like:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;if a function takes a pointer argument and expects a "simple" data type,
    e.g.  integer then pass the address of a variable with "&amp;amp;"&lt;/li&gt;
&lt;li&gt;if a function expects an array, then the array variable is equivalent to a
    pointer already so just pass the array variable&lt;/li&gt;
&lt;li&gt;if a function expects a &lt;em&gt;double&lt;/em&gt; pointer "**" then it expects to change
    the value of a normal pointer, so treat the pointer itself like a single
    variable in point 1 above.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;During one of his talks, Steve Klabnik stated that he no longer thinks of
"fighting the compiler", but instead considers it like a helpful friend passing
warnings about inadvisable behaviour.&lt;/p&gt;
&lt;p&gt;I can't say I've reached that stage yet.  It very much feels to me like when I
was learning C again.  Quite nice in a way, reminding me of my roots but on the
other hand I find it very un-reassuring.  The key is that I don't understand
&lt;em&gt;why&lt;/em&gt; the compiler is complaining - I haven't taken the language rules to heart
yet.  I've read the excellent &lt;a href="https://doc.rust-lang.org/book/"&gt;rust book&lt;/a&gt; in its entirity, but this
does not mean I &lt;em&gt;know&lt;/em&gt; the rules.  I know that with time it will come, and the
more I use the language the easier it will be. &lt;/p&gt;
&lt;p&gt;I have two learning projects on the go at the moment.  The first is an attempt
to wrap a &lt;a href="https://heasarc.gsfc.nasa.gov/docs/software/fitsio/fitsio.html"&gt;C astronomy library&lt;/a&gt; enabling access to the FITS data
format, and hopefully allowing me and others in the astronomy community to
start using Rust.  The second is a small remote API fetcher, with the idea to
run on my raspberry pi with a temperature sensor, and compare the predictions
made by weather models to the measured temperature.&lt;/p&gt;
&lt;p&gt;My FITS library is &lt;a href="https://crates.io/crates/fitsio"&gt;up on crates.io&lt;/a&gt;, and the API fetcher is on
&lt;a href="https://github.com/mindriot101/met-office-tester"&gt;github&lt;/a&gt;, comments are welcome!&lt;/p&gt;
&lt;p&gt;I look forward to productive times with Rust.  As a Python user with a
background in C/C++, I like the way Rust straddles the two - the memory safety
of Python but without a garbage collector, and the close-to-the-metal speed and
efficiency of C/C++.  I've been looking for a compiled language with RAII that
isn't C++ for ages.&lt;/p&gt;</summary><category term="rust"></category></entry></feed>