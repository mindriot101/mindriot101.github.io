<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>circularspace</title><link href="https://mindriot101.github.io/" rel="alternate"></link><link href="https://mindriot101.github.io/feeds/tag_linux.xml" rel="self"></link><id>https://mindriot101.github.io/</id><updated>2014-06-26T16:25:31+01:00</updated><entry><title>Tiling png images in linux</title><link href="https://mindriot101.github.io/blog/2014/06/26/tiling-png-images-in-linux/" rel="alternate"></link><updated>2014-06-26T16:25:31+01:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2014-06-26:blog/2014/06/26/tiling-png-images-in-linux/</id><summary type="html">&lt;p&gt;For printing multiple images, it's usually handy to tile images so that more than one page fits on a piece of paper at once. This can be achieved with ImageMagick and the &lt;code&gt;montage&lt;/code&gt; command.&lt;/p&gt;
&lt;h3&gt;Building a tiled image&lt;/h3&gt;
&lt;p&gt;For a 2x2 image an example command is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;montage -tile 2x2 -geometry 1600x1200 1.png 2.png 3.png 4.png output.png
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Be careful with the output specification, as if you forget it it'll overwrite the last png in the list.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This command produces a 1600x1200 sized image with 4 pngs arranged in a 2x2 grid. For more options see the man pages.&lt;/p&gt;</summary><category term="linux"></category></entry><entry><title>Mac keyboard keys with Synergy</title><link href="https://mindriot101.github.io/blog/2012/08/06/mac-keyboard-keys-with-synergy/" rel="alternate"></link><updated>2012-08-06T17:21:28+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2012-08-06:blog/2012/08/06/mac-keyboard-keys-with-synergy/</id><summary type="html">&lt;p&gt;Synergy is a great program to control multiple computers from a single keyboard or mouse even without them being plugged in. The only requirement is that theyre on the same local network.&lt;/p&gt;
&lt;p&gt;Im sharing my configuration which has my windows desktop as the server, and my macbook as the client. Using a windows keyboard creates some issues with the macbook, so here are the settings I use to map the keys correctly:&lt;/p&gt;
&lt;p&gt;Shift - Shift
Ctrl - Ctrl
Alt - Meta
Meta - Meta
Super - Alt
Also I use the fix CAPSLOCK key setting.&lt;/p&gt;
&lt;p&gt;This gives the same control layout as my mac (ie I can operate the cmd key with my left thumb) whilst remaining compatible.&lt;/p&gt;</summary><category term="OSX"></category><category term="linux"></category></entry><entry><title>Tunneling to a remote machine via ssh</title><link href="https://mindriot101.github.io/blog/2011/04/08/tunneling-to-a-remote-machine-via-ssh/" rel="alternate"></link><updated>2011-04-08T13:57:00+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2011-04-08:blog/2011/04/08/tunneling-to-a-remote-machine-via-ssh/</id><summary type="html">&lt;p&gt;Update: For the most part, I want to tunnel from the server to the local machine. This only works with the localhostname set to localhost, for example to tunnel a mysql server to the current machine port 10101:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ssh -L 10101:localhost:3306 user@remoteserver.com -N
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The localhost is important, and in this case the mysql client (on the local machine) has to have the hostname set to 127.0.0.1 (for some reason localhost doesnt work). 
Ive been trying to access my works MySQL database from outside the universities firewall and was having issues. Im still having issues but thats another story: Ill get to that.
Some definitions: the local machine is my machine accessing the server from outside the firewall, and the server machine is the one running the server and is behind the firewall.
My initial test was to run a rails server (which runs on port 3000) on the server machine. It serves a basic test page just to show it works. 
To set up a tunnel, I used the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ssh -L localport:localhostname:remoteport user@remoteserver -N
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The -L means set up a tunnel, and -N means to not actually log in to the server. For this example I mapped port 3000 on the server machine to port 10101 on the local machine by running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ssh -L 10101:hostname:3000 user@remoteserver -N
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then went to my web browser and typed localhost:10101 and got a simple rails start page. Et voila!&lt;/p&gt;
&lt;p&gt;&lt;img alt="ssh tunnel" src="{{" title="site.url }}/assets/images/ssh-tunnel.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;To access my MySQL server, this worked ok but the permissions for my username had to be altered as me@localhost (from the tunnel) could not access the databases owned by me@remoteserver due to the changing username. This is a separate issue so I will sort this out later!&lt;/p&gt;</summary><category term="ssh"></category><category term="linux"></category></entry><entry><title>Synergy</title><link href="https://mindriot101.github.io/blog/2010/12/18/synergy/" rel="alternate"></link><updated>2010-12-18T16:44:00+01:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2010-12-18:blog/2010/12/18/synergy/</id><summary type="html">&lt;p&gt;I have recently been playing with the &lt;a href="http://forums.macrumors.com/showthread.php?t=686540"&gt;Synergy&lt;/a&gt; software, which allows
a single mouse and keyboard to control multiple computers whatever
operating system they may be using. I am currently using my PC's mouse
and keyboard to write this on my macbook pro!&lt;/p&gt;
&lt;p&gt;It's pretty easy to set up, the windows server is pretty simple, the
only bit the documentation does not emphasise enough is that the screens
must be named after the hostname of the computer, so for widows it's the
'Computer name' and for OSX/linux it's the output of the 'hostname'
command.  The linux and OSX client is command line only which is quite
annoying but otherwise a very nice piece of software.&lt;/p&gt;
&lt;p&gt;Oh and it's free!&lt;/p&gt;</summary><category term="synergy"></category><category term="linux"></category></entry><entry><title>Changing the rpath on a linux binary</title><link href="https://mindriot101.github.io/blog/2010/07/27/changing-the-rpath-on-a-linux-binary/" rel="alternate"></link><updated>2010-07-27T10:15:00+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2010-07-27:blog/2010/07/27/changing-the-rpath-on-a-linux-binary/</id><summary type="html">&lt;p&gt;&lt;a href="http://nixos.org/patchelf.html"&gt;PatchELF&lt;/a&gt; is a program that allows the patching of the rpath of a
linux binary to be whatever you want, even the printing of it.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;&lt;strong&gt;Short explanation:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Shared libraries are used in an operating system to allow the easy
updating of code and patch fixing to a large group of programs. With
static libraries, a patchfix to a library common to many programs would
force the recompilation of those programs. A fix to a shared library
could go on behind the scenes without these other programs even
realising (in the best case!).&lt;/p&gt;
&lt;p&gt;To accomodate for this functionality, shared libraries must be located
during runtime. There are three ways to do this (in order):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;System default paths&lt;/li&gt;
&lt;li&gt;The binaries &lt;em&gt;rpath&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;LD_LIBRARY_PATH&lt;/em&gt; enviroment variable&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Libraries found in stage 3 will override libraries found in stage 2 and
the same for 2-&gt;1. Because of this overriding, the &lt;em&gt;LD_LIBRARY_PATH&lt;/em&gt;
method is very dangerous, as the user can accidentally change this and
cause many programs to break.&lt;/p&gt;
&lt;p&gt;As far as the sysadmin is concerned, the best way to install new
software is to update the local database which contains the system
default paths, but for the developer who wishes to compile their own
programs, option 2 is the best.&lt;/p&gt;
&lt;p&gt;See my &lt;a href="{{ site.url }}/assets/Programming/linking-on-linux.md"&gt;previous post&lt;/a&gt; to see how to do this at compile time, but say
while developing a piece of software, you want to see what these paths
are or change them. This is where &lt;em&gt;PatchELF&lt;/em&gt; comes in handy. It allows
the printing of the &lt;em&gt;rpath&lt;/em&gt; variable or setting it to a completely new
location (eg. for testing against a custom version of the system
libraries).  It even allows the changing of the system default path
interpreter.&lt;/p&gt;
&lt;p&gt;For more information see &lt;a href="http://www.eyrie.org/~eagle/notes/rpath.html"&gt;this very informative post&lt;/a&gt;.&lt;/p&gt;</summary><category term="linux"></category><category term="c"></category></entry><entry><title>Linking on linux</title><link href="https://mindriot101.github.io/blog/2010/07/08/linking-on-linux/" rel="alternate"></link><updated>2010-07-08T15:24:00+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2010-07-08:blog/2010/07/08/linking-on-linux/</id><summary type="html">&lt;p&gt;I've just found out what some strange linking options mean with gcc!&lt;/p&gt;
&lt;p&gt;Quite often i've seen at the linking stage&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;gcc object.o -o executable.out -lsomelibrary -Wl,-rpath,somepath
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I've discovered that the -Wl,-rpath,somepath expands basically to&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;-Wl -rpath&lt;span class="o"&gt;=&lt;/span&gt;somepath
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and this means the location of the shared library in &lt;em&gt;somepath&lt;/em&gt; is hard
coded into the executable to be used at runtime. &lt;em&gt;rpath&lt;/em&gt; means runtime
path, all of which means the dangerous &lt;em&gt;LD_LIBRARY_PATH&lt;/em&gt; environment
variable is not needed.&lt;/p&gt;</summary><category term="linux"></category><category term="c"></category></entry></feed>