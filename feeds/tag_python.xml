<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>circularspace</title><link href="https://mindriot101.github.io/" rel="alternate"></link><link href="https://mindriot101.github.io/feeds/tag_python.xml" rel="self"></link><id>https://mindriot101.github.io/</id><updated>2014-08-23T10:55:26+01:00</updated><entry><title>Interpolation in Python</title><link href="https://mindriot101.github.io/blog/2014/08/23/interpolation-in-python/" rel="alternate"></link><updated>2014-08-23T10:55:26+01:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2014-08-23:blog/2014/08/23/interpolation-in-python/</id><summary type="html">&lt;p&gt;For interpolation in python, scipy includes the interpolateackage containing (amongst other things) interp1d for simple interpolation.&lt;/p&gt;
&lt;p&gt;The function does not however perform extrapolation; if the interpolator is asked for a value outside the original range it will raise an exception. To get around this, the interpolator contains a &lt;code&gt;.x&lt;/code&gt; parameter which contains the original &lt;code&gt;x&lt;/code&gt; values used to construct itself. A boolean index can then be used to reject inputoints which fall outside of this range:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# Create an interpolator object from the training dataset
interp = scipy.interpolate.interp1d(data_x, data_y)

# Boolean index array for data points falling within the 
# training dataset range
ind = (new_x &amp;gt; interp.x.min()) &amp;amp; (new_x &amp;lt; interp.x.max())

# Finally create the new interpolated data, remembering
# to apply the index to the x data also
interpolated_x, interpolated_y = new_x[ind], interp(new_x[ind])
&lt;/pre&gt;&lt;/div&gt;</summary><category term="python"></category><category term="scipy"></category></entry><entry><title>IPython version 2.0</title><link href="https://mindriot101.github.io/blog/2014/04/02/ipython-version-20/" rel="alternate"></link><updated>2014-04-02T16:32:38+01:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2014-04-02:blog/2014/04/02/ipython-version-20/</id><summary type="html">&lt;p&gt;So IPython has updated to version 2.0. The full changelog &lt;a href="http://ipython.org/ipython-doc/dev/whatsnew/version2.0.html"&gt;can be found here&lt;/a&gt; and to summarise the key points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;interactive widgets for the notebook&lt;/li&gt;
&lt;li&gt;directory navigation in the notebook dashboard&lt;/li&gt;
&lt;li&gt;persistent URLs for notebooks&lt;/li&gt;
&lt;li&gt;a new modal user interface in the notebook&lt;/li&gt;
&lt;li&gt;a security model for notebooks&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I want to discuss a few of these and my thoughts on how they make IPython notebook finally an incredibly powerful tool for research, more so than before, and how I may be finally switching from simple scripts to using the notebook full time (with a major caveat!)&lt;/p&gt;
&lt;h2&gt;Directory navigation and persistent URLs&lt;/h2&gt;
&lt;p&gt;This feature enables navigation to seemingly an arbitrary location relative to the initial directory that &lt;code&gt;ipython notebook&lt;/code&gt; was called in. I suppose this prevents access to sensitive locations or locations that the user wants to keep out of the search path. For example all of my work is under a root directory of &lt;code&gt;~/work&lt;/code&gt; so if I start a notebook here then my other directories further up are not visible.&lt;/p&gt;
&lt;p&gt;The following screenshot gives the example on the IPython homepage, and shows the navigable locations.&lt;/p&gt;
&lt;p&gt;&lt;img src='http://ipython.org/ipython-doc/dev/_images/treeview.png' style='width: 80%; height: 80%;'&gt;
&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;With this a single server can manage all of the notebooks on a single machine. I was hoping for this functionality rather than either &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;having a single directory with all notebooks in, or&lt;/li&gt;
&lt;li&gt;running a separate server instance for each project.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Neither of these options were ideal and it really was preventing me from switching full time from individual scripts to IPython notebook, but with this change my ideal working method is now available.&lt;/p&gt;
&lt;h2&gt;Modal interface&lt;/h2&gt;
&lt;p&gt;As a vim user I did not enjoy having to use emacs-ey keyboard shortcuts (&lt;code&gt;c-m s&lt;/code&gt; to split a pane, for example). The modal editing allows most of the prefixed functionality to be put into "command mode" like moving to a different input box, and keeping editing commands concise.&lt;/p&gt;
&lt;h2&gt;The final caveats&lt;/h2&gt;
&lt;!-- vim keybindings --&gt;

&lt;p&gt;Of course I've yet to find a vim emulator that I'm happy with. &lt;a href="http://neovim.org/"&gt;Neovim&lt;/a&gt; promises to add an embeddable vim engine, but quite frankly I'm not really convinced that anything will allow me to get the vim feeling in another program.&lt;/p&gt;
&lt;p&gt;This is of course not a failing in IPython notebook specifically, but of anything that isn't vim really...&lt;/p&gt;
&lt;!-- nicer format so git diffs are better --&gt;

&lt;p&gt;One final thought, not about the new changes but about IPython notebook files in general. Yes the save format is renamed json and so is human readable and can be diffed, but has anyone really usefully diffed a notebook? It's basically impossible. Perhaps I've just not tried hard enough, and now with IPython 2.0 I may become more accustomed to diffing IPython notebook files and realise the folly of my ways.&lt;/p&gt;</summary><category term="python"></category></entry><entry><title>Testing PyMC3</title><link href="https://mindriot101.github.io/blog/2014/03/08/testing-pymc3/" rel="alternate"></link><updated>2014-03-08T13:14:42+00:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2014-03-08:blog/2014/03/08/testing-pymc3/</id><summary type="html">&lt;p&gt;I was trying to play with PyMC3 and as per usual with code under heavy development the tutorials were out of date, and the code wouldn't run. When I say "out of date" in fact the code ran but no valid numbers were produced. The API seemed to be consistent though.&lt;/p&gt;
&lt;p&gt;I managed to get the &lt;a href="http://nbviewer.ipython.org/github/pymc-devs/pymc/blob/master/pymc/examples/tutorial.ipynb"&gt;tutorial&lt;/a&gt; to run by installing the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Theano==0.6.0
pymc==3.0
scipy==0.13.3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;PyMC3 was installed from git from the &lt;code&gt;pymc3&lt;/code&gt; branch as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pymc&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;devs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pymc&lt;/span&gt;&lt;span class="nd"&gt;@pymc3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I had some trouble installing the &lt;code&gt;pymc3&lt;/code&gt; branch without installing the specific version of Theano shown.&lt;/p&gt;</summary><category term="python"></category></entry><entry><title>Null objects for the win</title><link href="https://mindriot101.github.io/blog/2013/09/04/null-objects-for-the-win/" rel="alternate"></link><updated>2013-09-04T23:18:00+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2013-09-04:blog/2013/09/04/null-objects-for-the-win/</id><summary type="html">&lt;p&gt;So I've been watching a lot of OO refactoring screencasts and reading posts and I'm able to say I've implemented some of the advice I've heard. Life's all about learning eh?&lt;/p&gt;
&lt;p&gt;So the main example I want to talk about here is &lt;em&gt;Null objects&lt;/em&gt;. &lt;/p&gt;
&lt;h2&gt;Null objects&lt;/h2&gt;
&lt;p&gt;In dynamic languages, and Ruby in particular&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; the concept of the &lt;em&gt;lack of something&lt;/em&gt; needs to be encapsulated. For example: you're wrapping the database and no entry exists; what to you return? In Ruby it's often &lt;code&gt;nil&lt;/code&gt; but this is not great for app design. This &lt;code&gt;nil&lt;/code&gt; will proliferate through your app causing errors in its wake (&lt;code&gt;NoMethodError&lt;/code&gt;) and causing de-localised stacktraces. Another example is the concept of a guest user. How do you represent this? Subclass the normal User class? &lt;em&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/em&gt;?!
One way to combat this is to introduce Null Objects, where they look like a standard user but don't respond to the methods in the same way.&lt;/p&gt;
&lt;p&gt;My implementation was in Python whilst working on a plotting script. I wanted the option to disable the lower subplot with a given command line argument, so I started adding &lt;code&gt;if&lt;/code&gt; conditions everywhere, which unfortunately was spread all over the code. My recent learning suddenly kicked in and I thought I could create a null axis object (on which all of the plotting commands were being called) which wouldn't respond to any plotting calls.&lt;/p&gt;
&lt;p&gt;In Ruby it's nice and simple to stub out methods, or use metaprogramming. For example by defining a class and a "null" &lt;code&gt;method_missing&lt;/code&gt; method a null object can be created&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NullAxis&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;method_missing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;NullAxis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;any_method_that_doesnt_exist&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; nil&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The implementation for Python is almost as simple&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NullAxis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__getattr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;        Like Ruby&amp;#39;s `method_missing`, this just returns a &lt;/span&gt;
&lt;span class="sd"&gt;        blank function that does nothing&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;pass&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fn&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With this I can leave the axis creation and previous plotting commands intact, but under the condition that the &lt;code&gt;matplotlib&lt;/code&gt; axis object does not exist the code will just silently do nothing.&lt;/p&gt;
&lt;p&gt;This example is small, but I felt good implementing it.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;due to the prevalence of &lt;code&gt;nil&lt;/code&gt;s&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="python"></category><category term="code design"></category></entry><entry><title>Function fitting with lmfit</title><link href="https://mindriot101.github.io/blog/2013/07/04/function-fitting-with-lmfit/" rel="alternate"></link><updated>2013-07-04T18:49:00+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2013-07-04:blog/2013/07/04/function-fitting-with-lmfit/</id><summary type="html">&lt;p&gt;&lt;a href="http://www.scipy.org/"&gt;Scipy&lt;/a&gt; contains functions for fitting equations with &lt;a href="http://www.python.org"&gt;Python&lt;/a&gt;, in its &lt;code&gt;scipy.optimize&lt;/code&gt; module. The two main ones I've used in the past are &lt;code&gt;leastsq&lt;/code&gt; and &lt;code&gt;curve_fit&lt;/code&gt;, which in itself is a convenience wrapper around &lt;code&gt;leastsq&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;curve_fit&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;For this operation you require three (four) things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a function to fit of form &lt;code&gt;f(x, *params)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; data&lt;/li&gt;
&lt;li&gt;&lt;code&gt;y&lt;/code&gt; data&lt;/li&gt;
&lt;li&gt;Optionally error data&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also supply an initial guess with the &lt;code&gt;p0&lt;/code&gt; argument.&lt;/p&gt;
&lt;p&gt;For example a simple linear equation&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;    Fit a linear function y = a * x + b&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;  &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;

&lt;span class="c"&gt;# Load the data to fit into x, y and e arrays&lt;/span&gt;

&lt;span class="n"&gt;p0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;popt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pcov&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curve_fit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sigma&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p0&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;p0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this example &lt;code&gt;popt&lt;/code&gt; contains the "optimal" results, and &lt;code&gt;pcov&lt;/code&gt; the covariance array after fitting.&lt;/p&gt;
&lt;h2&gt;The problem&lt;/h2&gt;
&lt;p&gt;This method of working is very powerful but you cannot place limits on the extent of the input fitting parameters, and you are locked into using the &lt;code&gt;leastsq&lt;/code&gt; underlying function with this nice interface. For example the function&lt;/p&gt;
&lt;p&gt;$$
f(x) = x^a
$$&lt;/p&gt;
&lt;p&gt;will explode and the fitting routine will complain when asked to fit around &lt;code&gt;a = 0&lt;/code&gt; when &lt;code&gt;x = 0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;lmfit&lt;/code&gt; provides this functionality in a convenient object-oriented interface. The function to fit is phrased a little differently but the functionality is the same.&lt;/p&gt;
&lt;p&gt;The easiest way is to write out the desired function as with &lt;code&gt;curve_fit&lt;/code&gt; and include a "residuals" wrapper to calculate the normalised (if errors are given) distance away from the model&lt;/p&gt;
&lt;p&gt;$$
R = \frac{y - m}{\sigma}
$$&lt;/p&gt;
&lt;p&gt;where $R$ are the residuals, $y$ are the observed y values, $m$ the values as calculated by the function that's being fitted, and $\sigma$ the uncertainties. These residuals tested so that the square of the value above is minimised. The functional form of the residuals function is a little different, and parameters must be accessed with a dictionary lookup and the attribute &lt;code&gt;value&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;lmfit&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;resids&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;    Given the function f outlined above, return the normalised residuals&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;

    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;

&lt;span class="c"&gt;# generate the input parameters&lt;/span&gt;
&lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lmfit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Parameters&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lmfit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;minimize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resids&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above code alters the &lt;code&gt;params&lt;/code&gt; object in place so the best fit parameters are given with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Best fit a: {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Best fit b: {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The uncertainties can be accessed with the &lt;code&gt;stderr&lt;/code&gt; parameter. A nice report can be printed with &lt;code&gt;lmfit.report_fit(params)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Crucially the initial values for the parameter guesses as well as bounds and (something I've not explored much) functional relationships between them. This is a simple way of applying some basic Bayesian priors to the parameter assumptions.&lt;/p&gt;</summary><category term="science"></category><category term="python"></category></entry><entry><title>Cross site REST development</title><link href="https://mindriot101.github.io/blog/2013/03/10/cross-site-rest-development/" rel="alternate"></link><updated>2013-03-10T00:00:00+01:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2013-03-10:blog/2013/03/10/cross-site-rest-development/</id><summary type="html">&lt;p&gt;Often when developing complex client side apps, a simple &lt;code&gt;python -m SimpleHTTPServer&lt;/code&gt; can host the html. For a node backend though, a second server has to be run to host the REST api, which must be on a different domain. For example the python server is on port &lt;code&gt;8000&lt;/code&gt;, whereas the REST server is run on port &lt;code&gt;3000&lt;/code&gt;.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;This will usually throw an error containing the script &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Origin http://localhost:8000 is not allowed by Access-Control-Allow-Origin
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is a security measure input by web browsers to prevent cross domain scripting attacks, and is a good idea, but during development this can be a problem.&lt;/p&gt;
&lt;p&gt;One option is to use a fully featured web server e.g. express but for rich client side applications this is generally overkill, a simpler library such as &lt;a href="http://mcavage.github.com/node-restify/"&gt;restify&lt;/a&gt; is ideal.&lt;/p&gt;
&lt;p&gt;A nice option as supplied by &lt;a href="http://stackoverflow.com/a/14187628/56711"&gt;this&lt;/a&gt; SO answer is to add middleware to allow certain domains access to the REST server.&lt;/p&gt;
&lt;p&gt;For development this is a handy workaround, but for production obviously &lt;em&gt;DO NOT USE!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For restify this can be inserted before your normal CRUD routes as middleware using &lt;code&gt;server.use(...)&lt;/code&gt;.&lt;/p&gt;</summary><category term="python"></category><category term="webdev"></category></entry><entry><title>Embedding Python in LaTeX</title><link href="https://mindriot101.github.io/blog/2013/02/05/embedding-python-in-latex/" rel="alternate"></link><updated>2013-02-05T11:38:00+01:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2013-02-05:blog/2013/02/05/embedding-python-in-latex/</id><summary type="html">&lt;p&gt;Combining Python with LaTeX is a powerful combination. It allows for arbitrary code to be executed which either gives the results of expressions, or can be used to embed programatically certain things e.g. the paths of files or images.&lt;/p&gt;
&lt;p&gt;By downloading python.sty and including it in a usepackage block, python code can be run.&lt;/p&gt;
&lt;p&gt;I was having trouble getting this to work as it seems I was using an invalid version of python.sty. The version linked above works as of the date of this post&lt;/p&gt;
&lt;p&gt;This must be compiled with latex/pdflatex and the -shell-escape option. Probably any latex compiler which supports this flag will do so probably luatex will support this, but I dont really see the point in embedding python in luatex compatible latex!&lt;/p&gt;
&lt;p&gt;I believe any python module thats available to the system python installation can be used, so the following will print the current directory the latex was compiled in&lt;/p&gt;
&lt;p&gt;An optional python script can be included with the compilation. A common usage is to import the modules required for the whole project, or to get some global variables&lt;/p&gt;</summary><category term="python"></category><category term="LaTeX"></category></entry><entry><title>Cython: getting a vector from a numpy array</title><link href="https://mindriot101.github.io/blog/2011/11/11/cython-getting-a-vector-from-a-numpy-array/" rel="alternate"></link><updated>2011-11-11T12:05:21+01:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2011-11-11:blog/2011/11/11/cython-getting-a-vector-from-a-numpy-array/</id><summary type="html">&lt;p&gt;This is a problem that has been challenging me for a while: my c++ code uses vectors everywhere so how can I wrap these classes and functions into python easily? Ive tried many many times with e.g.  swig or boost::python to no avail. 
That is until today…&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;Thanks to the very kind people at Stack Overflow and this question in particular, I was able to create a wrapper function for Cython which does exactly what it says on the tin.The full code for the wrapper function is given here:&lt;/p&gt;
&lt;p&gt;{% highlight python %}
from libcpp.vector cimport vector
cimport numpy as np&lt;/p&gt;
&lt;h1&gt;Utility function to convert from numpy array to vector&lt;/h1&gt;
&lt;p&gt;cdef vector[double] arrayToVector(np.ndarray[np.double_t,ndim=1] array):
    cdef long size = array.size
    cdef vector[double] vec
    cdef long i
    for i in range(size):
        vec.push_back(array[i])&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;return vec
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;{% endhighlight %}&lt;/p&gt;
&lt;p&gt;I shall try and explain this now. Firstly the Cython vector library (libcpp.vector) contains a pre-wrapped vector class which is great but its incompatible with the numpy array class (hence why this is a problem!). Importing numpy (with cimport) at this stage is also required. 
The declaration is a little verbose for my liking (especially compared to python) but the argument is declared as a ndarray (the base class to array) with some templated parameters, using the square bracket notation in cython as opposed to the triangular bracket notation in c++. It shall hold double datatypes and it has only one dimension. The function also returns a double vector. It is safe to declare it with cdef as this will enable more optimisations and it wont need to be called directly from python anyway. 
I have yet to find a memcpy-type function in cython so I am then declaring the variables used (another Cython optimisation) and appending the array one value at a time into the created vector object. Finally I return the created vector ready to be used as an argument to an external c++ function.
The setup.py file is identical to wrapping any other c++ code and is documented well on the Cython website itself so I wont go into it here. 
Once I get more comfortable with the syntax I might try and write a templated version of the function, but for now I am content using the double version and writing another piece of code if I need eg. an integer function.&lt;/p&gt;</summary><category term="python"></category></entry><entry><title>Plotting unevenly gridded contour plots</title><link href="https://mindriot101.github.io/blog/2011/06/14/plotting-unevenly-gridded-contour-plots/" rel="alternate"></link><updated>2011-06-14T15:16:27+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2011-06-14:blog/2011/06/14/plotting-unevenly-gridded-contour-plots/</id><summary type="html">&lt;p&gt;Quite often at work I have to generate colour maps of certain things, which are generally not sampled evenly in coordinate space. I am also a huge fan of Python, so I thought to myself: can I combine these things? Well until now I didnt think you could. Matplotlibs contour plots require evenly spaced x and y points with z points to match. This is until I found a way&lt;/p&gt;
&lt;p&gt;This method is taken from example 2here, and is the way I do it now.&lt;/p&gt;
&lt;p&gt;Firstly generate an evenly spaced grid of your x and y data. The simplest way to do this is for data x and y:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;xi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;yi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The function that does the magic work is matplotlib.mlab.griddata and is based on Matlabs griddata function. It takes 5 parameters:&lt;/p&gt;
&lt;p&gt;the raw x and y values
the set of colour data (z)
the evenly spaced x and y values (xi and yi)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;zi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mlab&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;griddata&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;yi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This can now be used with plotting functions like contourf, eg.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contourf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;yi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;zi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="python"></category><category term="visualisation"></category></entry><entry><title>Adding module imports to iPython startup</title><link href="https://mindriot101.github.io/blog/2011/01/12/adding-module-imports-to-ipython-startup/" rel="alternate"></link><updated>2011-01-12T10:19:00+01:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2011-01-12:blog/2011/01/12/adding-module-imports-to-ipython-startup/</id><summary type="html">&lt;p&gt;I'm constantly opening an iPython interpreter and having to import my
common modules (for me &lt;a href="http://www.stsci.edu/resources/software_hardware/pyfits"&gt;pyfits&lt;/a&gt; mostly).&lt;/p&gt;
&lt;p&gt;The easiest way to import modules on iPython startup is to look in your&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;~/.&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ipy_user_conf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;file which is a nice easy way to add python code into your ipython
startup (as opposed to the ipythonrc file which is about colours etc.).&lt;/p&gt;
&lt;p&gt;In the main function, just add a line such as&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;import pyfits&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will allow custom code to be run at startup. In this case, iPython
loads the pyfits module.&lt;/p&gt;
&lt;p&gt;You could add such things as&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;from pylab import *; x = arange(100); y = sin(x)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;for example if you were working with sine waves a lot.&lt;/p&gt;</summary><category term="python"></category><category term="ipython"></category></entry></feed>