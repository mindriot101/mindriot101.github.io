<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>circularspace</title><link href="https://mindriot101.github.io/" rel="alternate"></link><link href="https://mindriot101.github.io/feeds/tag_ipython.xml" rel="self"></link><id>https://mindriot101.github.io/</id><updated>2015-01-18T20:33:57+00:00</updated><entry><title>Separate IPython profiles for interactive use</title><link href="https://mindriot101.github.io/blog/2015/01/18/separate-ipython-profiles-for-interactive-use/" rel="alternate"></link><updated>2015-01-18T20:33:57+00:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2015-01-18:blog/2015/01/18/separate-ipython-profiles-for-interactive-use/</id><summary type="html">&lt;p&gt;I used to have two simple shell aliases for &lt;code&gt;IPython&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;ipy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ipython
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;pylab&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ipython --pylab&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;These were separated for a couple of reasons:&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;pylab&lt;/code&gt; mode of &lt;code&gt;IPython&lt;/code&gt; was deprecated, for good reason. It "infects" the global namespace with all &lt;code&gt;matplotlib&lt;/code&gt; and &lt;code&gt;numpy&lt;/code&gt; functions. It breaks two entries in the famous "Zen of Python":&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Explicit is better than implicit.&lt;/li&gt;
&lt;li&gt;Namespaces are one honking great idea -- let's do more of those!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From a practicality perspective it also is much slower to start up. This is annoying when I quickly want to plot something.&lt;/p&gt;
&lt;p&gt;I then remembered the &lt;code&gt;IPython&lt;/code&gt; profile functionality. A separate profile, and hence separate configuration and startup procedure for each profile. I customized my configuration for each profile in basically the same way: I turned off the startup banner - I've seen it enough times now! - and configured the log format. In the "pylab" form I set &lt;code&gt;c.InteractiveShellApp.pylab = 'auto'&lt;/code&gt; to enable the interactive plotting, with a backend chosen for me, and set &lt;code&gt;c.TerminalInteractiveShell.autocall = 2&lt;/code&gt;. This last one may be a bit controversial, so I'll explain a bit further.&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;autocall&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;This setting (sometimes) removes the need for parentheses when running python code. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;stuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;stuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# Normal python&lt;/span&gt;
&lt;span class="n"&gt;stuff&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="c"&gt;# Valid with autocall = 1 or 2, see below&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;more_stuff&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Hi there&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;more_stuff&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;   &lt;span class="c"&gt;# Normal python&lt;/span&gt;
&lt;span class="n"&gt;more_stuff&lt;/span&gt;     &lt;span class="c"&gt;# Exception in all but autocall = 2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This setting has three options: &lt;code&gt;0&lt;/code&gt; to disable the feature, &lt;code&gt;1&lt;/code&gt; to enable it in a "smart" sense, and 2 where it's enabled always. The main difference between &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt; is when a "bare" function is called, e.g. &lt;code&gt;more_stuff&lt;/code&gt; in the example above, without parentheses. With &lt;code&gt;autocall = 2&lt;/code&gt; the function is &lt;em&gt;called&lt;/em&gt; rather than merely returned.&lt;/p&gt;
&lt;h2&gt;Starting up with &lt;code&gt;seaborn&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;I am a fan of the &lt;a href="http://stanford.edu/~mwaskom/software/seaborn/"&gt;seaborn&lt;/a&gt; visualisation package, for the styles and extra features. In the &lt;code&gt;pylab&lt;/code&gt; profile I set this up to automatically import seaborn and silently fail if it's not found. This code can be found &lt;a href="https://github.com/mindriot101/dotfiles/blob/master/ipython/ipython/profile_pylab/startup/00-with-seaborn.py"&gt;in this file&lt;/a&gt;. I'll explain it here.&lt;/p&gt;
&lt;p&gt;The code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;print_function&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Loading seaborn...&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;seaborn&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;sns&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Cannot load seaborn&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Done&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I start by importing &lt;code&gt;print_function&lt;/code&gt; from &lt;code&gt;__future__&lt;/code&gt; to ensure python 2/3 compatibility. Next in a &lt;code&gt;try/except&lt;/code&gt; block I try importing &lt;code&gt;seaborn&lt;/code&gt;, under the &lt;code&gt;sns&lt;/code&gt; prefix which I'm accustomed to. Should an import error occur (such as I have not got the package installed in the current &lt;code&gt;conda&lt;/code&gt; environment) I tell the user. The print functions are called such with &lt;code&gt;... end='')&lt;/code&gt; to ensure the status message is all on one line, purely for aesthetics.&lt;/p&gt;
&lt;h2&gt;Current configuration&lt;/h2&gt;
&lt;p&gt;My current configuration can be read for&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"Normal" mode: &lt;a href="https://github.com/mindriot101/dotfiles/blob/master/ipython/ipython/profile_default/ipython_config.py"&gt;https://github.com/mindriot101/dotfiles/blob/master/ipython/ipython/profile_default/ipython_config.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;"Pylab" mode: &lt;a href="https://github.com/mindriot101/dotfiles/blob/master/ipython/ipython/profile_pylab/ipython_config.py"&gt;https://github.com/mindriot101/dotfiles/blob/master/ipython/ipython/profile_pylab/ipython_config.py&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="python"></category><category term="visualisation"></category><category term="ipython"></category></entry><entry><title>Adding module imports to iPython startup</title><link href="https://mindriot101.github.io/blog/2011/01/12/adding-module-imports-to-ipython-startup/" rel="alternate"></link><updated>2011-01-12T10:19:00+01:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2011-01-12:blog/2011/01/12/adding-module-imports-to-ipython-startup/</id><summary type="html">&lt;p&gt;I'm constantly opening an iPython interpreter and having to import my
common modules (for me &lt;a href="http://www.stsci.edu/resources/software_hardware/pyfits"&gt;pyfits&lt;/a&gt; mostly).&lt;/p&gt;
&lt;p&gt;The easiest way to import modules on iPython startup is to look in your&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;~/.&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ipy_user_conf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;file which is a nice easy way to add python code into your ipython
startup (as opposed to the ipythonrc file which is about colours etc.).&lt;/p&gt;
&lt;p&gt;In the main function, just add a line such as&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;import pyfits&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will allow custom code to be run at startup. In this case, iPython
loads the pyfits module.&lt;/p&gt;
&lt;p&gt;You could add such things as&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;from pylab import *; x = arange(100); y = sin(x)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;for example if you were working with sine waves a lot.&lt;/p&gt;</summary><category term="python"></category><category term="ipython"></category></entry></feed>