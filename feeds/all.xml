<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>circularspace</title><link href="https://mindriot101.github.io/" rel="alternate"></link><link href="https://mindriot101.github.io/feeds/all.xml" rel="self"></link><id>https://mindriot101.github.io/</id><updated>2015-12-15T13:41:39+00:00</updated><entry><title>Add timestamps to stdout</title><link href="https://mindriot101.github.io/blog/2015/12/15/add-timestamps-to-stdout/" rel="alternate"></link><updated>2015-12-15T13:41:39+00:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2015-12-15:blog/2015/12/15/add-timestamps-to-stdout/</id><summary type="html">&lt;p&gt;I spent some time trying to get timestamps added to C++ printing, e.g .through &lt;code&gt;cout&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I naive approach is to write a function &lt;code&gt;get_current_time()&lt;/code&gt; and put it before all printing statements e.g.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;get_current_time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Message&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This requires changing all logging statements. Then my googling stumbled upon &lt;a href="https://stackoverflow.com/questions/22118713/add-time-stamp-with-stdcout"&gt;this question&lt;/a&gt; which had an &lt;a href="http://stackoverflow.com/a/22119115/56711"&gt;elegant solution&lt;/a&gt; incorporating a decorator object.&lt;/p&gt;
&lt;p&gt;Further down the page however I came upon a much nicer solution that transcends languages and programs and can be applied to running shell commands. &lt;a href="http://stackoverflow.com/a/22130756/56711"&gt;The answer I ended up stealing and adding to my .zshrc&lt;/a&gt; is as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;function&lt;/span&gt; add_timestamps&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    awk &lt;span class="s1"&gt;&amp;#39;{print &amp;quot;[&amp;quot;strftime()&amp;quot;]: &amp;quot;$0}&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This can be used after a program is run e.g. &lt;code&gt;a.out | add_timestamps&lt;/code&gt; to add the current time before every line printed out by &lt;code&gt;a.out&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Even &lt;code&gt;top&lt;/code&gt; can be passed through this function, but with predictably nasty results!&lt;/p&gt;</summary></entry><entry><title>Python database transactions</title><link href="https://mindriot101.github.io/blog/2015/09/19/python-database-transactions/" rel="alternate"></link><updated>2015-09-19T14:47:23+01:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2015-09-19:blog/2015/09/19/python-database-transactions/</id><summary type="html">&lt;h2&gt;&lt;code&gt;pymysql&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Defaults to &lt;code&gt;autocommit=False&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pymysql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;insert into test (value) values (10)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pymysql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;select value from test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# =&amp;gt; []&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To commit changes to the database, &lt;code&gt;#commit()&lt;/code&gt; must be called:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pymysql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;insert into test (value) values (10)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# Call the commit line&lt;/span&gt;
&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pymysql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;select value from test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# =&amp;gt; [(10, )]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With a context manager on a connection, an implicit transaction is opened:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;pymysql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;insert into test (value) values (10)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;pymysql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;select value from test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;# =&amp;gt; [(10, )]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;connect&lt;/code&gt; function includes an autocommit parameter:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pymysql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;autocommit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;insert into test (value) values (10)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pymysql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;select value from test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# =&amp;gt; [(10, )]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Multiple cursors can see any changes made within a transaction&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pymysql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;cursor2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;insert into test (value) values (10)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cursor2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;select value from test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# =&amp;gt; [(10, )]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Multiple connections are isolated from each other&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pymysql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;connection2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pymysql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;cursor2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;insert into test (value) values (10)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cursor2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;select value from test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# =&amp;gt; []&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Using a connection as a context manager starts and commits a transaction, or rolls back on error&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pymysql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# Implicit transaction, and automatic #commit call&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;insert into test (value) values (10)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pymysql&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;select value from test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# =&amp;gt; [(10, )]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="python"></category></entry><entry><title>Separate IPython profiles for interactive use</title><link href="https://mindriot101.github.io/blog/2015/01/18/separate-ipython-profiles-for-interactive-use/" rel="alternate"></link><updated>2015-01-18T20:33:57+00:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2015-01-18:blog/2015/01/18/separate-ipython-profiles-for-interactive-use/</id><summary type="html">&lt;p&gt;I used to have two simple shell aliases for &lt;code&gt;IPython&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;ipy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ipython
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;pylab&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ipython --pylab&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;These were separated for a couple of reasons:&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;pylab&lt;/code&gt; mode of &lt;code&gt;IPython&lt;/code&gt; was deprecated, for good reason. It "infects" the global namespace with all &lt;code&gt;matplotlib&lt;/code&gt; and &lt;code&gt;numpy&lt;/code&gt; functions. It breaks two entries in the famous "Zen of Python":&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Explicit is better than implicit.&lt;/li&gt;
&lt;li&gt;Namespaces are one honking great idea -- let's do more of those!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From a practicality perspective it also is much slower to start up. This is annoying when I quickly want to plot something.&lt;/p&gt;
&lt;p&gt;I then remembered the &lt;code&gt;IPython&lt;/code&gt; profile functionality. A separate profile, and hence separate configuration and startup procedure for each profile. I customized my configuration for each profile in basically the same way: I turned off the startup banner - I've seen it enough times now! - and configured the log format. In the "pylab" form I set &lt;code&gt;c.InteractiveShellApp.pylab = 'auto'&lt;/code&gt; to enable the interactive plotting, with a backend chosen for me, and set &lt;code&gt;c.TerminalInteractiveShell.autocall = 2&lt;/code&gt;. This last one may be a bit controversial, so I'll explain a bit further.&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;autocall&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;This setting (sometimes) removes the need for parentheses when running python code. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;stuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;stuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;# Normal python&lt;/span&gt;
&lt;span class="n"&gt;stuff&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="c"&gt;# Valid with autocall = 1 or 2, see below&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;more_stuff&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Hi there&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;more_stuff&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;   &lt;span class="c"&gt;# Normal python&lt;/span&gt;
&lt;span class="n"&gt;more_stuff&lt;/span&gt;     &lt;span class="c"&gt;# Exception in all but autocall = 2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This setting has three options: &lt;code&gt;0&lt;/code&gt; to disable the feature, &lt;code&gt;1&lt;/code&gt; to enable it in a "smart" sense, and 2 where it's enabled always. The main difference between &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt; is when a "bare" function is called, e.g. &lt;code&gt;more_stuff&lt;/code&gt; in the example above, without parentheses. With &lt;code&gt;autocall = 2&lt;/code&gt; the function is &lt;em&gt;called&lt;/em&gt; rather than merely returned.&lt;/p&gt;
&lt;h2&gt;Starting up with &lt;code&gt;seaborn&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;I am a fan of the &lt;a href="http://stanford.edu/~mwaskom/software/seaborn/"&gt;seaborn&lt;/a&gt; visualisation package, for the styles and extra features. In the &lt;code&gt;pylab&lt;/code&gt; profile I set this up to automatically import seaborn and silently fail if it's not found. This code can be found &lt;a href="https://github.com/mindriot101/dotfiles/blob/master/ipython/ipython/profile_pylab/startup/00-with-seaborn.py"&gt;in this file&lt;/a&gt;. I'll explain it here.&lt;/p&gt;
&lt;p&gt;The code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;print_function&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Loading seaborn...&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;seaborn&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;sns&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Cannot load seaborn&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Done&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I start by importing &lt;code&gt;print_function&lt;/code&gt; from &lt;code&gt;__future__&lt;/code&gt; to ensure python 2/3 compatibility. Next in a &lt;code&gt;try/except&lt;/code&gt; block I try importing &lt;code&gt;seaborn&lt;/code&gt;, under the &lt;code&gt;sns&lt;/code&gt; prefix which I'm accustomed to. Should an import error occur (such as I have not got the package installed in the current &lt;code&gt;conda&lt;/code&gt; environment) I tell the user. The print functions are called such with &lt;code&gt;... end='')&lt;/code&gt; to ensure the status message is all on one line, purely for aesthetics.&lt;/p&gt;
&lt;h2&gt;Current configuration&lt;/h2&gt;
&lt;p&gt;My current configuration can be read for&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;"Normal" mode: &lt;a href="https://github.com/mindriot101/dotfiles/blob/master/ipython/ipython/profile_default/ipython_config.py"&gt;https://github.com/mindriot101/dotfiles/blob/master/ipython/ipython/profile_default/ipython_config.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;"Pylab" mode: &lt;a href="https://github.com/mindriot101/dotfiles/blob/master/ipython/ipython/profile_pylab/ipython_config.py"&gt;https://github.com/mindriot101/dotfiles/blob/master/ipython/ipython/profile_pylab/ipython_config.py&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="python"></category><category term="visualisation"></category><category term="ipython"></category></entry><entry><title>git submodules are not so bad</title><link href="https://mindriot101.github.io/blog/2014/12/28/git-submodules-are-not-so-bad/" rel="alternate"></link><updated>2014-12-28T23:25:51+00:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2014-12-28:blog/2014/12/28/git-submodules-are-not-so-bad/</id><summary type="html">&lt;p&gt;I see a lot of complaints about git submodules, &lt;a href="http://blogs.atlassian.com/2013/05/alternatives-to-git-submodule-git-subtree/"&gt;people suggesting alternatives&lt;/a&gt;, &lt;a href="https://codingkilledthecat.wordpress.com/2012/04/28/why-your-company-shouldnt-use-git-submodules/"&gt;complaints about merging&lt;/a&gt; or other bits and pieces.&lt;/p&gt;
&lt;p&gt;Git submodules &lt;em&gt;have their place&lt;/em&gt;. Yes they are not ideal for all situations but they are ideal for the typical use case I'm about to outline.&lt;/p&gt;
&lt;h2&gt;Example use case&lt;/h2&gt;
&lt;p&gt;In my work I have a &lt;em&gt;master&lt;/em&gt; project which contains multiple submodules. Each submodule is also cloned into a separate &lt;em&gt;development&lt;/em&gt; repository sitting near by. I use the &lt;em&gt;master&lt;/em&gt; repository to synchronise pushes to the deployment server (in this case an isolated computer sitting on a mountain in Chile!)&lt;/p&gt;
&lt;p&gt;Admittedly I have to train myself to follow certain procedures:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Never&lt;/em&gt; perform code alterations or general development in the submodule inside the &lt;em&gt;master&lt;/em&gt; repository.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Only use the &lt;em&gt;master&lt;/em&gt; repository for synchronisation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Git submodule advantages&lt;/h2&gt;
&lt;p&gt;For my use case I find it very good for the &lt;em&gt;master&lt;/em&gt; repository to track a single &lt;em&gt;commit&lt;/em&gt;, as this bakes in the state of the submodules for each commit of the &lt;em&gt;master&lt;/em&gt; repository. I only need to record the git sha of the &lt;em&gt;master&lt;/em&gt; to be able to recreate the entire source code checkout of the individual packages.&lt;/p&gt;
&lt;p&gt;Development on the individual packages is also easier as they're modularised into separate small, testable directories, and only combined in the &lt;em&gt;master&lt;/em&gt; during a "deployment".&lt;/p&gt;
&lt;p&gt;I can add tests to the &lt;em&gt;master&lt;/em&gt; project that assess the integration between submodules. In the case of an error I can then check out a specific revision in my submodules at will to re-run tests and find breaking changes, perhaps with &lt;code&gt;git bisect&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Git submodule disadvantages&lt;/h2&gt;
&lt;p&gt;The paradigm shift of using submodules is a pain. They require extra, very strange commands to synchronise.&lt;/p&gt;
&lt;p&gt;I have a few git aliases to help me with this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;su = submodule update --init --recursive
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This command initialises and synchronises the submodules in whatever state they started in, either not existing - so a clone takes place - or a previous commit. It also synchronises nested submodules, which I'll admit I would probably never do.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;upsub = submodule foreach &amp;#39;git checkout master &amp;amp;&amp;amp; git pull&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A very useful command, &lt;code&gt;git submodule foreach&lt;/code&gt; runs a command over every submodule specified in the current project. In this case it's used to update the master branch to &lt;code&gt;origin&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A minor annoyance is a submodule with code changes will appear to a git status in the &lt;em&gt;master&lt;/em&gt; as an untracked file, showing the whole submodule as &lt;em&gt;modified&lt;/em&gt;. I personally like this feature as it reminds me that the submodule in the &lt;em&gt;master&lt;/em&gt; is not in a proper state:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;-Subproject commit c74dd1e56794962d7ff7661a7f8ae84cafa96b4f
+Subproject commit c74dd1e56794962d7ff7661a7f8ae84cafa96b4f-dirty
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and therefore shouts at me for forgetting rule 1. above. It can be disabled via: &lt;code&gt;git status --ignore-submodules=dirty&lt;/code&gt; but I do not recommend this. Consider it a &lt;em&gt;feature&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Git subtree&lt;/h2&gt;
&lt;p&gt;A common suggested alternative is &lt;a href="http://git-scm.com/book/en/v1/Git-Tools-Subtree-Merging"&gt;git subtree&lt;/a&gt; which I have tried, though briefly. Perhaps learning submodules from an early stage has ingrained their process in my brain too hard for other alternatives to really show their benefits. As far as I could tell &lt;code&gt;git subtree&lt;/code&gt; creates a huge merge commit in the master repository as a single static blob. I didn't look into coding in the subtrees but I feel the separation of projects afforded by submodules fits my needs better. Perhaps I just have to read the linked article above a bit more.&lt;/p&gt;
&lt;h2&gt;Hints and tips&lt;/h2&gt;
&lt;p&gt;Some hints and tips I always have to google myself:&lt;/p&gt;
&lt;h3&gt;Remove a submodule&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/a/16162000/56711"&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git submodule deinit asubmodule
git rm asubmodule
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Summary&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Separate projects and use a &lt;em&gt;master&lt;/em&gt; project to coordinate commits,&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Never&lt;/em&gt; develop in the &lt;em&gt;master&lt;/em&gt;s copy of the repository,&lt;/li&gt;
&lt;li&gt;Use shortcuts to make managing submodules easier.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="git"></category></entry><entry><title>git rebase --skip is fine</title><link href="https://mindriot101.github.io/blog/2014/08/27/git-rebase-skip-is-fine/" rel="alternate"></link><updated>2014-08-27T22:53:48+01:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2014-08-27:blog/2014/08/27/git-rebase-skip-is-fine/</id><summary type="html">&lt;p&gt;So &lt;code&gt;git rebase&lt;/code&gt; is a powerful tool, able to change history itself. With this power however requires great care to avoid needing to &lt;code&gt;git push --force&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Git rebase comes with very user friendly ways to cancel out of a rebase if something goes wrong or if you become confused:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git rebase --abort
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This returns your working tree back to the state before the rebase was started.&lt;/p&gt;
&lt;p&gt;One thing that has always made me nervous when using rebase was when I rebased and a conflict occured, so I only kept changes from the HEAD commit which caused the following message:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Applying&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;change&lt;/span&gt;
&lt;span class="n"&gt;No&lt;/span&gt; &lt;span class="n"&gt;changes&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;did&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;forget&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;git add&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
&lt;span class="n"&gt;If&lt;/span&gt; &lt;span class="n"&gt;there&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;nothing&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;stage&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;chances&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="n"&gt;already&lt;/span&gt; &lt;span class="n"&gt;introduced&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;same&lt;/span&gt; &lt;span class="n"&gt;changes&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;might&lt;/span&gt; &lt;span class="n"&gt;want&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;skip&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;When&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;resolved&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;problem&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;git rebase --continue&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;If&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;prefer&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;skip&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;git rebase --skip&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;instead&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;To&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;original&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt; &lt;span class="n"&gt;rebasing&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;git rebase --abort&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now I don't like error messages or messages that look like error messages so this result is quite off-putting. In reality the second line of advice, running &lt;code&gt;git rebase --skip&lt;/code&gt; is not a hacky way out of this situation, it's the right answer. skipping a commit when it only includes changes from the HEAD commit is perfectly normal. Once I learned this my time with git was much easier.&lt;/p&gt;</summary><category term="git"></category></entry><entry><title>Interpolation in Python</title><link href="https://mindriot101.github.io/blog/2014/08/23/interpolation-in-python/" rel="alternate"></link><updated>2014-08-23T10:55:26+01:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2014-08-23:blog/2014/08/23/interpolation-in-python/</id><summary type="html">&lt;p&gt;For interpolation in python, scipy includes the interpolateackage containing (amongst other things) interp1d for simple interpolation.&lt;/p&gt;
&lt;p&gt;The function does not however perform extrapolation; if the interpolator is asked for a value outside the original range it will raise an exception. To get around this, the interpolator contains a &lt;code&gt;.x&lt;/code&gt; parameter which contains the original &lt;code&gt;x&lt;/code&gt; values used to construct itself. A boolean index can then be used to reject inputoints which fall outside of this range:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# Create an interpolator object from the training dataset
interp = scipy.interpolate.interp1d(data_x, data_y)

# Boolean index array for data points falling within the 
# training dataset range
ind = (new_x &amp;gt; interp.x.min()) &amp;amp; (new_x &amp;lt; interp.x.max())

# Finally create the new interpolated data, remembering
# to apply the index to the x data also
interpolated_x, interpolated_y = new_x[ind], interp(new_x[ind])
&lt;/pre&gt;&lt;/div&gt;</summary><category term="python"></category><category term="scipy"></category></entry><entry><title>Tiling png images in linux</title><link href="https://mindriot101.github.io/blog/2014/06/26/tiling-png-images-in-linux/" rel="alternate"></link><updated>2014-06-26T16:25:31+01:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2014-06-26:blog/2014/06/26/tiling-png-images-in-linux/</id><summary type="html">&lt;p&gt;For printing multiple images, it's usually handy to tile images so that more than one page fits on a piece of paper at once. This can be achieved with ImageMagick and the &lt;code&gt;montage&lt;/code&gt; command.&lt;/p&gt;
&lt;h3&gt;Building a tiled image&lt;/h3&gt;
&lt;p&gt;For a 2x2 image an example command is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;montage -tile 2x2 -geometry 1600x1200 1.png 2.png 3.png 4.png output.png
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Be careful with the output specification, as if you forget it it'll overwrite the last png in the list.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This command produces a 1600x1200 sized image with 4 pngs arranged in a 2x2 grid. For more options see the man pages.&lt;/p&gt;</summary><category term="linux"></category></entry><entry><title>Failed loading plugin: copr</title><link href="https://mindriot101.github.io/blog/2014/06/16/failed-loading-plugin-copr/" rel="alternate"></link><updated>2014-06-16T16:09:35+01:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2014-06-16:blog/2014/06/16/failed-loading-plugin-copr/</id><summary type="html">&lt;p&gt;If you're:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;running Fedora&lt;/li&gt;
&lt;li&gt;using dnf as a package manager&lt;/li&gt;
&lt;li&gt;get the following error: &lt;code&gt;Failed loading plugin: copr&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;then listen up, your solution is at hand: install &lt;code&gt;python-requests&lt;/code&gt; using yum:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo yum install -y python-requests
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I have not tested if this will work installing with pip yet.
The linked bug report suggests that this will be registered as a dependency as of 2014-06-05 so this problem should go away.&lt;/p&gt;
&lt;p&gt;Source: &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=1104088"&gt;this bug report&lt;/a&gt;&lt;/p&gt;</summary><category term="linux fedora"></category></entry><entry><title>Using a Makefile for science!</title><link href="https://mindriot101.github.io/blog/2014/04/23/using-a-makefile-for-science/" rel="alternate"></link><updated>2014-04-23T10:27:49+01:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2014-04-23:blog/2014/04/23/using-a-makefile-for-science/</id><summary type="html">&lt;p&gt;The declarative style of a Makefile (or substitute your own language-of-choice's implementation of *akefiles) lends itself well to scientific processes, where a reproducible method is crucial. I recently found this out when analysing some data, which consisted of the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;compile the source code of the programs I was using&lt;/li&gt;
&lt;li&gt;use these programs on the same data&lt;/li&gt;
&lt;li&gt;plot some summary plots&lt;/li&gt;
&lt;li&gt;show the plots&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With the declarative style of Makefiles I could rely on the latest results no matter what changed in the analysis path, for example the plot scripts used in step 3. were listed as a dependency of the step run to make the plots so when the script changed, the plots would be recreated. &lt;/p&gt;
&lt;p&gt;Another advantage is that step 2. took a long time, so the "update only when the dependency is out of date" style of makefiles really came in handy. I could change the (relatively quick) plotting scripts to my hearts content safe in the knowledge that the data I was using was up to date.&lt;/p&gt;
&lt;p&gt;For scientific analysis, reproducibility is of prime concern, and should I come back to this project at a later date, the combination of a makefile plus the fact that the project was stored in a git repository makes the code easy to use (the readme just contains the line: &lt;code&gt;make&lt;/code&gt;) and consistent.&lt;/p&gt;
&lt;p&gt;A small tip that I did not know before starting out on this endeavour (and is specific to GNU make) is to use &lt;code&gt;$(MAKE)&lt;/code&gt; whenever running make in a subdirectory. This enables parallel job flags (e.g. &lt;code&gt;-j 4&lt;/code&gt;) to be passed down to subsequent make invocations.&lt;/p&gt;
&lt;p&gt;For reference, I was getting the message:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;warning&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;jobserver&lt;/span&gt; &lt;span class="n"&gt;unavailable&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;j1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;  &lt;span class="n"&gt;Add&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;rule&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;when calling subtasks with a simple &lt;code&gt;make&lt;/code&gt;. Now with &lt;code&gt;$(MAKE)&lt;/code&gt; the jobs run in parallel where possible.&lt;/p&gt;</summary><category term="make"></category><category term="code"></category><category term="science"></category></entry><entry><title>IPython version 2.0</title><link href="https://mindriot101.github.io/blog/2014/04/02/ipython-version-20/" rel="alternate"></link><updated>2014-04-02T16:32:38+01:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2014-04-02:blog/2014/04/02/ipython-version-20/</id><summary type="html">&lt;p&gt;So IPython has updated to version 2.0. The full changelog &lt;a href="http://ipython.org/ipython-doc/dev/whatsnew/version2.0.html"&gt;can be found here&lt;/a&gt; and to summarise the key points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;interactive widgets for the notebook&lt;/li&gt;
&lt;li&gt;directory navigation in the notebook dashboard&lt;/li&gt;
&lt;li&gt;persistent URLs for notebooks&lt;/li&gt;
&lt;li&gt;a new modal user interface in the notebook&lt;/li&gt;
&lt;li&gt;a security model for notebooks&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I want to discuss a few of these and my thoughts on how they make IPython notebook finally an incredibly powerful tool for research, more so than before, and how I may be finally switching from simple scripts to using the notebook full time (with a major caveat!)&lt;/p&gt;
&lt;h2&gt;Directory navigation and persistent URLs&lt;/h2&gt;
&lt;p&gt;This feature enables navigation to seemingly an arbitrary location relative to the initial directory that &lt;code&gt;ipython notebook&lt;/code&gt; was called in. I suppose this prevents access to sensitive locations or locations that the user wants to keep out of the search path. For example all of my work is under a root directory of &lt;code&gt;~/work&lt;/code&gt; so if I start a notebook here then my other directories further up are not visible.&lt;/p&gt;
&lt;p&gt;The following screenshot gives the example on the IPython homepage, and shows the navigable locations.&lt;/p&gt;
&lt;p&gt;&lt;img src='http://ipython.org/ipython-doc/dev/_images/treeview.png' style='width: 80%; height: 80%;'&gt;
&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;With this a single server can manage all of the notebooks on a single machine. I was hoping for this functionality rather than either &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;having a single directory with all notebooks in, or&lt;/li&gt;
&lt;li&gt;running a separate server instance for each project.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Neither of these options were ideal and it really was preventing me from switching full time from individual scripts to IPython notebook, but with this change my ideal working method is now available.&lt;/p&gt;
&lt;h2&gt;Modal interface&lt;/h2&gt;
&lt;p&gt;As a vim user I did not enjoy having to use emacs-ey keyboard shortcuts (&lt;code&gt;c-m s&lt;/code&gt; to split a pane, for example). The modal editing allows most of the prefixed functionality to be put into "command mode" like moving to a different input box, and keeping editing commands concise.&lt;/p&gt;
&lt;h2&gt;The final caveats&lt;/h2&gt;
&lt;!-- vim keybindings --&gt;

&lt;p&gt;Of course I've yet to find a vim emulator that I'm happy with. &lt;a href="http://neovim.org/"&gt;Neovim&lt;/a&gt; promises to add an embeddable vim engine, but quite frankly I'm not really convinced that anything will allow me to get the vim feeling in another program.&lt;/p&gt;
&lt;p&gt;This is of course not a failing in IPython notebook specifically, but of anything that isn't vim really...&lt;/p&gt;
&lt;!-- nicer format so git diffs are better --&gt;

&lt;p&gt;One final thought, not about the new changes but about IPython notebook files in general. Yes the save format is renamed json and so is human readable and can be diffed, but has anyone really usefully diffed a notebook? It's basically impossible. Perhaps I've just not tried hard enough, and now with IPython 2.0 I may become more accustomed to diffing IPython notebook files and realise the folly of my ways.&lt;/p&gt;</summary><category term="python"></category></entry><entry><title>Testing PyMC3</title><link href="https://mindriot101.github.io/blog/2014/03/08/testing-pymc3/" rel="alternate"></link><updated>2014-03-08T13:14:42+00:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2014-03-08:blog/2014/03/08/testing-pymc3/</id><summary type="html">&lt;p&gt;I was trying to play with PyMC3 and as per usual with code under heavy development the tutorials were out of date, and the code wouldn't run. When I say "out of date" in fact the code ran but no valid numbers were produced. The API seemed to be consistent though.&lt;/p&gt;
&lt;p&gt;I managed to get the &lt;a href="http://nbviewer.ipython.org/github/pymc-devs/pymc/blob/master/pymc/examples/tutorial.ipynb"&gt;tutorial&lt;/a&gt; to run by installing the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Theano==0.6.0
pymc==3.0
scipy==0.13.3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;PyMC3 was installed from git from the &lt;code&gt;pymc3&lt;/code&gt; branch as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pymc&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;devs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pymc&lt;/span&gt;&lt;span class="nd"&gt;@pymc3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I had some trouble installing the &lt;code&gt;pymc3&lt;/code&gt; branch without installing the specific version of Theano shown.&lt;/p&gt;</summary><category term="python"></category></entry><entry><title>Dickwraith stories</title><link href="https://mindriot101.github.io/blog/2013/12/09/dickwraith-stories/" rel="alternate"></link><updated>2013-12-09T23:23:34+00:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2013-12-09:blog/2013/12/09/dickwraith-stories/</id><summary type="html">&lt;p&gt;So I've done some very dickish things as a darkwraith in Dark Souls, mostly involving firestorm. I'm certain my stories are not the &lt;em&gt;worst&lt;/em&gt; but they're probably some of the worst things &lt;em&gt;I've&lt;/em&gt; done! I'm leaving this here as a confessional of sorts, but also a great place to leave my invasion stories.&lt;/p&gt;
&lt;p&gt;Some context: these stories were probably performed on my SL1 dickwraith character, using a +5 chaos battle axe for max damage. I'm armed with a max pyro flame with firestorm and fire surge for the comedy.&lt;/p&gt;
&lt;p&gt;I was fighting a naked character with bonewheel shield, and fighting on the roof of Sen's. We were on the narrow bridge and my opponent was clearly trying to run past me to the boss fog. We had a small interaction which left me with the impression that it would only take two hits, and even hitting the bonewheel shield would do considerable damage. The single hit I landed caused fear in my opponent so she started running. I thought of getting a handy backstab (remember I'm playing a dickwraith) so pursued. In my excitement I didn't notice that she went into the cage lift and I continued running. We shared a tense ride down to the ground floor, and we were both attacking like mad. My wolf ring allowed me to get the hits and my victory achieved.&lt;/p&gt;
&lt;p&gt;Again on the roof of Sen's, I enter the host's world and go on the hunt. I see the archer is missing so start running to the top. I see the words "Summoning Phantom" on my screen and realising that Tarkus was on his way. I'd earlier failed to kill a character being assisted by Tarkus that night so thought I was in for a difficult fight. I got to the top expecting Tarkus and the host but saw neither, until I glanced across to the building with Tarkus' summon sign and saw them both standing in the doorway. They had not seen me yet so I armed firestorm and waited out of sight until the inevitable: they started crossing the bridge. When the host neared I cast firestorm and caught him as he rounded the corner, probably expecting a quick backstab on the black phantom crouching on the floor just before flames erupted out from the ground.&lt;/p&gt;</summary><category term="dark souls"></category></entry><entry><title>Puppet and vagrant</title><link href="https://mindriot101.github.io/blog/2013/10/30/puppet-and-vagrant/" rel="alternate"></link><updated>2013-10-30T23:13:00+01:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2013-10-30:blog/2013/10/30/puppet-and-vagrant/</id><summary type="html">&lt;p&gt;So I've been playing with &lt;a href="http://puppetlabs.com/"&gt;Puppet&lt;/a&gt; and &lt;a href="http://www.opscode.com/chef/"&gt;Chef&lt;/a&gt; for server provisioning. The two technologies attempt to fill the same, or at least similar tasks: managing system configuration. With &lt;a href="http://www.vagrantup.com/"&gt;Vagrant&lt;/a&gt;, testing these two systems has become extremely easy. Vagrant supports both methods for server provisioning and the turnaround time for the tests is extremely short.&lt;/p&gt;
&lt;p&gt;I have tried for quite a while to run chef on a system, to no avail. I've often found that an unexpected crash puts end to my testing, whereas the first times I tried puppet I achieved success. I also feel the declarative style with which the puppet modules are built really suits the problems that puppet solves.&lt;/p&gt;
&lt;p&gt;This post is less of a comparison of Chef vs Puppet, perhaps the first in a series comparing the two, but for now we start with Puppet.&lt;/p&gt;
&lt;h2&gt;Simple configuration&lt;/h2&gt;
&lt;p&gt;Tools used:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vagrant&lt;/li&gt;
&lt;li&gt;puppet&lt;/li&gt;
&lt;li&gt;librarian-puppet&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'm not going to go into details about the installation of the tools, apart from to say that vagrant is installed from the &lt;a href="http://vagrantup.com"&gt;vagrant website&lt;/a&gt; and puppet/librarian-puppet are installed as gems.&lt;/p&gt;
&lt;p&gt;A project can be completetly defined (for example for version control) in four files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Vagrantfile&lt;/li&gt;
&lt;li&gt;Puppetfile&lt;/li&gt;
&lt;li&gt;Gemfile&lt;/li&gt;
&lt;li&gt;manifests/default.pp (by convention)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The directory layout for the project, and what should be checked into version control is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;.
├── Gemfile
├── Puppetfile
├── Vagrantfile
└── manifests
    └── default.pp
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;Gemfile&lt;/code&gt; stores the ruby gem versions, the &lt;code&gt;Puppetfile&lt;/code&gt; sets the puppet modules, the &lt;code&gt;Vagrantfile&lt;/code&gt; configures the virtual machine and the &lt;code&gt;manifests/default.pp&lt;/code&gt; file defines the state of the virtual machine.&lt;/p&gt;
&lt;h3&gt;Gemfile&lt;/h3&gt;
&lt;p&gt;A simple portable gemfile stores the required gems (puppet and librarian-puppet) and gives the option to version them. An example gemfile is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://rubygems.org&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;librarian-puppet&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;puppet&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Vagrantfile&lt;/h3&gt;
&lt;p&gt;This is where the vagrant virtual machine configuration is stored. The operating system and provisioning settings are stored here. A minimal example is given below, and sets up the box to use (precise64) and configures the puppet provisioning.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="no"&gt;VAGRANTFILE_API_VERSION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;

&lt;span class="no"&gt;Vagrant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;VAGRANTFILE_API_VERSION&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;precise64&amp;quot;&lt;/span&gt;

  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;provision&lt;/span&gt; &lt;span class="ss"&gt;:puppet&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;puppet&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;puppet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manifests_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;manifests&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;puppet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manifest_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;default.pp&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;puppet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;module_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;modules&amp;quot;&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;librarian-puppet&lt;/h3&gt;
&lt;p&gt;A major part of development is the DRY principle, and applies to package configuration also. &lt;code&gt;librarian-puppet&lt;/code&gt; allows pre-build and tested modules to install common packages. Puppetlabs maintain a repository of modules at &lt;a href="https://forge.puppetlabs.com/"&gt;puppet forge&lt;/a&gt;, or on &lt;a href="http://www.github.com"&gt;github&lt;/a&gt; and these can be configured and managed through librarian-puppet. An example configuration is given below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;forge&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://forge.puppetlabs.com&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;mod&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;puppetlabs/stdlib&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;mod&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;puppetlabs/postgresql&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;mod&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;puppetlabs/apt&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where the &lt;code&gt;mod&lt;/code&gt; lines define the required modules with the author prefix, and the forge line defines the source. The syntax is remarkably similar to the Gemfile.&lt;/p&gt;
&lt;h3&gt;manifests/default.pp&lt;/h3&gt;
&lt;p&gt;This file describes the final configuration. I recommend following the &lt;a href="http://docs.puppetlabs.com/learning/index.html"&gt;official puppet tutorial&lt;/a&gt;, an example file which installs vim can be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;exec&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;apt-get update&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/bin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;vim&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;require&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;Exec&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;apt-get update&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;ensure&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;present&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;though this does not use the modules. These can be defined and configured by reopening the class declaration, e.g.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# Puppetfile&lt;/span&gt;
&lt;span class="n"&gt;mod&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;puppetlabs/postgresql&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# manifests/default.pp&lt;/span&gt;
&lt;span class="k"&gt;exec&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;apt-get update&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/usr/bin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;vim&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;ensure&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;present&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;require&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;Exec&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;apt-get update&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;postgresql::client&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;require&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;Exec&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;apt-get update&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This configuration will install the &lt;code&gt;vim&lt;/code&gt; and &lt;code&gt;postgresql::client&lt;/code&gt; packages ensuring that &lt;code&gt;apt-get update&lt;/code&gt; has been run before.&lt;/p&gt;
&lt;h2&gt;Starting a project from scratch&lt;/h2&gt;
&lt;p&gt;These files can be initialised through three commands:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bundle init&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vagrant init&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;librarian-puppet init&lt;/code&gt;, &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;which are then configured to the users needs. Commands to run to create the full working system are&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;bundle install
bundle &lt;span class="nb"&gt;exec &lt;/span&gt;librarian-puppet install
vagrant up
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Simple eh? More documentation for these files can be found:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.vagrantup.com"&gt;http://www.vagrantup.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://puppetlabs.com/"&gt;http://puppetlabs.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.puppetlabs.com/learning/index.html"&gt;The excellent puppet tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://librarian-puppet.com/"&gt;librarian-puppet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="puppet"></category><category term="vagrant"></category><category term="devops"></category></entry><entry><title>git quick</title><link href="https://mindriot101.github.io/blog/2013/09/05/git-quick/" rel="alternate"></link><updated>2013-09-05T23:04:00+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2013-09-05:blog/2013/09/05/git-quick/</id><summary type="html">&lt;p&gt;Git quick is a simple shell command I've written for quicker one line messages. It allows committing like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;g q A simple commit message
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note the lack of quotes.  Some things I've used to make it quicker:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;alias git to g in my zshrc&lt;/li&gt;
&lt;li&gt;alias q to quick in my gitconfig file&lt;/li&gt;
&lt;li&gt;put the &lt;code&gt;git-quick&lt;/code&gt; script into my path somewhere&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;The script&lt;/h3&gt;
&lt;p&gt;The script really can't be much simpler:&lt;/p&gt;
&lt;script src="https://gist.github.com/mindriot101/6456980.js"&gt;&lt;/script&gt;

&lt;p&gt;(gisted for quick cloning)&lt;/p&gt;
&lt;p&gt;I only learnt about git cleverly loading any executable &lt;code&gt;git-*&lt;/code&gt; script, and it simply expands any arguments into the commit message.&lt;/p&gt;
&lt;p&gt;Note: this can be even quicker if you alias git quick to a single letter in your zshrc e.g. &lt;code&gt;alias gq='git quick'&lt;/code&gt; or &lt;code&gt;alias q='git quick'&lt;/code&gt; but this seems a bit silly to me. &lt;/p&gt;
&lt;p&gt;&lt;em&gt;WARNING: this increases the likelihood of commit messages like "stuff" or "commit" as it makes it really easy to write short informative messages, so I implore you to use this newly gained power wisely.&lt;/em&gt;&lt;/p&gt;</summary><category term="git"></category></entry><entry><title>vim crashing with ruby on OSX</title><link href="https://mindriot101.github.io/blog/2013/09/05/vim-crashing-with-ruby-on-osx/" rel="alternate"></link><updated>2013-09-05T15:44:00+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2013-09-05:blog/2013/09/05/vim-crashing-with-ruby-on-osx/</id><summary type="html">&lt;p&gt;I started having trouble with vim crashing for me. I'm on OSX with homebrew and rbenv, and it crashed when editing Ruby files. I would get a segmentation fault. &lt;/p&gt;
&lt;p&gt;After some googling which was not particularly fruitful, the solution I came up with was:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;switch to the system ruby &lt;code&gt;rbenv shell system&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;uninstall vim completely with homebrew &lt;code&gt;brew uninstall vim&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;reinstall vim from head &lt;code&gt;brew install --HEAD --override-system-vi vim&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This seems to have fixed the problem, though I do not know if it was switching to the system ruby or installing from head. This may require extra study which I do not have time to do now.&lt;/p&gt;</summary><category term="osx"></category><category term="vim"></category><category term="ruby"></category></entry><entry><title>Null objects for the win</title><link href="https://mindriot101.github.io/blog/2013/09/04/null-objects-for-the-win/" rel="alternate"></link><updated>2013-09-04T23:18:00+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2013-09-04:blog/2013/09/04/null-objects-for-the-win/</id><summary type="html">&lt;p&gt;So I've been watching a lot of OO refactoring screencasts and reading posts and I'm able to say I've implemented some of the advice I've heard. Life's all about learning eh?&lt;/p&gt;
&lt;p&gt;So the main example I want to talk about here is &lt;em&gt;Null objects&lt;/em&gt;. &lt;/p&gt;
&lt;h2&gt;Null objects&lt;/h2&gt;
&lt;p&gt;In dynamic languages, and Ruby in particular&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; the concept of the &lt;em&gt;lack of something&lt;/em&gt; needs to be encapsulated. For example: you're wrapping the database and no entry exists; what to you return? In Ruby it's often &lt;code&gt;nil&lt;/code&gt; but this is not great for app design. This &lt;code&gt;nil&lt;/code&gt; will proliferate through your app causing errors in its wake (&lt;code&gt;NoMethodError&lt;/code&gt;) and causing de-localised stacktraces. Another example is the concept of a guest user. How do you represent this? Subclass the normal User class? &lt;em&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/em&gt;?!
One way to combat this is to introduce Null Objects, where they look like a standard user but don't respond to the methods in the same way.&lt;/p&gt;
&lt;p&gt;My implementation was in Python whilst working on a plotting script. I wanted the option to disable the lower subplot with a given command line argument, so I started adding &lt;code&gt;if&lt;/code&gt; conditions everywhere, which unfortunately was spread all over the code. My recent learning suddenly kicked in and I thought I could create a null axis object (on which all of the plotting commands were being called) which wouldn't respond to any plotting calls.&lt;/p&gt;
&lt;p&gt;In Ruby it's nice and simple to stub out methods, or use metaprogramming. For example by defining a class and a "null" &lt;code&gt;method_missing&lt;/code&gt; method a null object can be created&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NullAxis&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;method_missing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;NullAxis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;any_method_that_doesnt_exist&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; nil&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The implementation for Python is almost as simple&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NullAxis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__getattr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;        Like Ruby&amp;#39;s `method_missing`, this just returns a &lt;/span&gt;
&lt;span class="sd"&gt;        blank function that does nothing&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;pass&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fn&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With this I can leave the axis creation and previous plotting commands intact, but under the condition that the &lt;code&gt;matplotlib&lt;/code&gt; axis object does not exist the code will just silently do nothing.&lt;/p&gt;
&lt;p&gt;This example is small, but I felt good implementing it.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;due to the prevalence of &lt;code&gt;nil&lt;/code&gt;s&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="python"></category><category term="code design"></category></entry><entry><title>Ruby is scary</title><link href="https://mindriot101.github.io/blog/2013/08/29/ruby-is-scary/" rel="alternate"></link><updated>2013-08-29T10:41:00+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2013-08-29:blog/2013/08/29/ruby-is-scary/</id><summary type="html">&lt;p&gt;Ok so after my &lt;a href="{{ site.url }}/blog/2013/08/26/ruby-first-impressions/"&gt;previous post&lt;/a&gt;, I was feeling pretty excited about Ruby. I talked about its power and flexibility and the exciting things that could come from it.&lt;/p&gt;
&lt;p&gt;I also talked of Ruby's scariness, it's ability to terrify new programmers and potential for difficulties.&lt;/p&gt;
&lt;p&gt;I've found one particular example which I'm sure shouldn't be allowed. I can see the intention and how in experienced hands it is amazing, but I can't unsee it's potential for misuse.&lt;/p&gt;
&lt;p&gt;In Ruby you can add functionality by redeclaring the class you want to extend and add methods, or overwrite/extend methods. &lt;/p&gt;
&lt;p&gt;This is not the same as inheriting: you must create a new name in a standard inheritance chain. Not with Ruby; you can put the desired functionality straight into the class.&lt;/p&gt;
&lt;p&gt;This I talked about before. What I didn't talk about before (probably because I never thought of it) is that any subclasses of your "new" class will inherit this new behaviour.&lt;/p&gt;
&lt;p&gt;The logical conclusion of this is thus: everything in Ruby inherits from &lt;code&gt;Object&lt;/code&gt;. What about adding methods to &lt;code&gt;Object&lt;/code&gt;?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Object&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Printing foo&amp;quot;&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; Printing foo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This example is harmless - mostly harmless ;) - but what about in a gem you make public:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Object&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;
    &lt;span class="c1"&gt;# Launch the nukes&lt;/span&gt;
    &lt;span class="c1"&gt;# ... or system &amp;quot;rm -rf *&amp;quot;&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# user: &amp;quot;The documentation tells me that to do something awesome, call 3.foo&amp;quot;&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;

&lt;span class="c1"&gt;# BANG!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;How can anybody sleep at night?!&lt;/p&gt;</summary><category term="ruby"></category></entry><entry><title>Ruby: first impressions</title><link href="https://mindriot101.github.io/blog/2013/08/26/ruby-first-impressions/" rel="alternate"></link><updated>2013-08-26T22:14:00+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2013-08-26:blog/2013/08/26/ruby-first-impressions/</id><summary type="html">&lt;p&gt;So I've been trying &lt;a href="http://www.ruby-lang.org/en/"&gt;Ruby&lt;/a&gt; recently,
partially trying to add some substance to my CV, and partially out of
curiosity. I used to be a complete python snob; I didn't understand
why anyone &lt;em&gt;wouldn't&lt;/em&gt; use python. It is a dynamic language so no more
manual memory management (though there are plenty of advantages &lt;em&gt;cough&lt;/em&gt;
&lt;em&gt;cough&lt;/em&gt;); duck typing deserves its own special place in hell but it
is bloody convenient; the amazing standard library which is great for
system administration; and many other things.&lt;/p&gt;
&lt;p&gt;I use python in my day job&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; and was perfectly happy with it. As I
came from a C++ background I agreed with the "explicit is better than
implicit" philosophy, I understood the power of decorators and context
managers - I still had yet to master metaclasses but that's another
story.&lt;/p&gt;
&lt;p&gt;I was amazed with some of the metaprogramming that was possible with
python, like the list comprehension, or the memory saving generators,
it makes working with scientific data a breeze with &lt;code&gt;numpy&lt;/code&gt; snd
&lt;code&gt;matplotlib&lt;/code&gt;, and the significant whitespace really works well: you are
all indenting your code properly aren't you?&lt;/p&gt;
&lt;p&gt;I heard that Ruby has some amazing metaprogramming ability, but I didn't
realise until I tried that you can add functionality to an existing
class by just redefining it! Even core classes like numbers.&lt;/p&gt;
&lt;p&gt;Rails does this exclusively creating such lines as&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ago&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;by adding functionality to the Fixnum class, for example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Fixnum&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;Hello world&amp;quot;&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; &amp;quot;Hello world&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Metaprogramming&lt;/h2&gt;
&lt;p&gt;So the metaprogramming outlined above is great, and extremely powerful.
I was worried initially about this and how it may cause confusion.
Function overloading in C++ is already bad enough as you have to dive
into the documentation for the simplest methods. In ruby the possibility for
this is even worse! But it seems the common libraries are trustworthy in this
respect and do not abuse this functionality. &lt;strong&gt;Beginners warning: do not abuse
this feature!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Another amazing feature is &lt;code&gt;method_missing&lt;/code&gt; where if a method is not recognised
(Ruby uses the message sending style where you could send any method to any
object, it just may not do anything - and will probably throw an exception) this
method - if defined - is called.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestClass&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;method_missing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Message &amp;#39;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shift&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39; called with arguments: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;TestClass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bad_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;stuff&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; Message &amp;#39;bad_method&amp;#39; called with arguments: [100, &amp;quot;stuff&amp;quot;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Context&lt;/h2&gt;
&lt;p&gt;In Python context managers were added in 2.6 to perform code before and after
the block, such as automatically closing files (note: the &lt;code&gt;contextlib&lt;/code&gt; library
is brilliant for this, creating one manually is a lot of boilerplate)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;contextlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;contextmanager&lt;/span&gt;

&lt;span class="nd"&gt;@contextmanager&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;to_stuff&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Before&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;After&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;to_stuff&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;

&lt;span class="c"&gt;# Prints:&lt;/span&gt;
&lt;span class="c"&gt;# Before &lt;/span&gt;
&lt;span class="c"&gt;# True&lt;/span&gt;
&lt;span class="c"&gt;# After&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ruby takes this to the next level with blocks. The syntax looks similar but it's
baked into the language:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;to_stuff&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Before&amp;#39;&lt;/span&gt;
  &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;After&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;to_stuff&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# Prints:&lt;/span&gt;
&lt;span class="c1"&gt;# Before &lt;/span&gt;
&lt;span class="c1"&gt;# True&lt;/span&gt;
&lt;span class="c1"&gt;# After&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You see these blocks &lt;em&gt;everywhere&lt;/em&gt;! This context has great power, a new object
when generated can be passed into a block for more syntactically nice setup&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="no"&gt;TestObject&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tap&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Against Python's "explicit is better than implicit" philosophy, Ruby seems to
have the opposite. I don't know if this is completely true but that's how it
seems. For example class methods can be treated as if they were local variables,
and parentheses are (mostly) optional, the last statement of any block is
returned, and other things. For example&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestClass&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;
    &lt;span class="mi"&gt;10&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_foo&lt;/span&gt;
    &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;        &lt;span class="c1"&gt;# Is foo a variable or a method?!&lt;/span&gt;

    &lt;span class="n"&gt;print_value&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt; &lt;span class="c1"&gt;# No parentheses!&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Generating DSLs&lt;/h2&gt;
&lt;p&gt;Due to the free syntax of Ruby, especially the lack of parentheses, a custom DSL
(domain specific language, essentially a mini programming language for a very
specific task) is easy to create in Ruby. Consequently to a beginner it's
easy to read Ruby code written like this and believe it is a different language.&lt;/p&gt;
&lt;p&gt;For example a sort-of Makefile alternative &lt;code&gt;rake&lt;/code&gt; can look like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;This is a simple task. You can run it with `rake foo`&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ss"&gt;:foo&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="no"&gt;Dir&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;whereas the testing framework &lt;code&gt;rspec&lt;/code&gt; can look like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;FooModel&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;before&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:each&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Before&amp;#39;&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;should have some specified behaviour&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;FooModel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;not_be&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or even&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;print_stuff&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;change_directory&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/tmp&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;add_file&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;These would all be valid ruby and generally apart from the odd keyword (do/end
etc.) they can have a completely different style. This makes each implementation
fresh and different and exciting, providing a lot of power to the language.&lt;/p&gt;
&lt;h2&gt;Rails&lt;/h2&gt;
&lt;p&gt;Now we get on to the poster child of Ruby: Rails. Who can mention Ruby without
talking about rails eh?&lt;/p&gt;
&lt;p&gt;Well it's a great thing to have for a language. Can you name a defining Python
library? Django? Numpy? Twisted? In some sense Python is a little &lt;em&gt;too&lt;/em&gt; good at
everything which makes it not excel as much as Rails. A lot of the things
outlined above are prevalent in Rails, and make the framework a dream to work
with. Ok so a dream for me, perhaps I'm just naive and haven't worked day to day
in it, but I'd definitley like to try!&lt;/p&gt;
&lt;p&gt;In all Ruby is worth learning, system administrators are using it for tasks, or
one can use it as a Makefile replacement and Rails' emphasis on convention makes
it a lot to learn initially but once you have a basic knowledge it's not too
difficult to pick up. I've outlined some of the resources I used to learn below
for more information. I hope to learn more of what Ruby has to offer in the
future, and possibly to pass on my knowledge to the next generation.&lt;/p&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;h3&gt;Beginner&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://railsforzombies.org/"&gt;Rails for Zombies&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Technical&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://railscasts.com/"&gt;Railscasts&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Advanced&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://robots.thoughtbot.com/"&gt;Thoughtbot&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(I'll try and keep these updated)&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;"job"&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="ruby"></category></entry><entry><title>cello voice</title><link href="https://mindriot101.github.io/blog/2013/08/24/cello-voice/" rel="alternate"></link><updated>2013-08-24T12:05:00+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2013-08-24:blog/2013/08/24/cello-voice/</id><summary type="html">&lt;p&gt;So Mac OSX has the &lt;code&gt;say&lt;/code&gt; command, which reads out some text in the computers voice synthesis functionality. This is old news.&lt;/p&gt;
&lt;p&gt;The new hotness is switching into the "cello" voice with &lt;code&gt;say -v cello&lt;/code&gt;. I's lyrical and beautiful, though reading out file names is entertaining:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;say -v cello source/_posts/2013-08-24-cello-voice.markdown
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This was brought to my attention through the &lt;code&gt;guard-shell&lt;/code&gt; gem &lt;a href="https://github.com/guard/guard-shell#saying-the-name-of-the-file-you-changed-and-displaying-a-notification"&gt;README&lt;/a&gt;.&lt;/p&gt;</summary><category term="OSX"></category></entry><entry><title>Using guard with foreman</title><link href="https://mindriot101.github.io/blog/2013/07/29/using-guard-with-foreman/" rel="alternate"></link><updated>2013-07-29T11:09:00+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2013-07-29:blog/2013/07/29/using-guard-with-foreman/</id><summary type="html">&lt;p&gt;I've been playing with &lt;a href="http://www.ruby-lang.org/"&gt;Ruby&lt;/a&gt; quite a bit recently and I like the way a custom-looking DSL can be created from the same source language.&lt;/p&gt;
&lt;p&gt;This means I've converted a lot of my tools (e.g. Makefiles) into Rakefiles and I've just found &lt;a href="http://ddollar.github.io/foreman/"&gt;foreman&lt;/a&gt; which can manage multiple subprocesses and combine their output into a nice looking coloured console result. This is typically used to manage web processes (server, task runner, development database etc.) and is required by &lt;a href="http://heroku.com"&gt;heroku&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I was using this technique with a simple &lt;code&gt;Procfile&lt;/code&gt; for managing my thesis. I have two tasks running: &lt;a href="http://users.phys.psu.edu/~collins/software/latexmk-jcc/"&gt;latexmk&lt;/a&gt; which manages the latex compiling, and &lt;a href="http://guardgem.org/"&gt;guard&lt;/a&gt; which manages the python plotting.&lt;/p&gt;
&lt;p&gt;I added these to the &lt;code&gt;Procfile&lt;/code&gt; as such&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="ss"&gt;latex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;latexmk&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pvc&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;pdf&lt;/span&gt; &lt;span class="no"&gt;Thesis&lt;/span&gt;
&lt;span class="ss"&gt;plotting&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="n"&gt;guard&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This would cause both processes to hang, which I couldn't explain. I then thought that guard is interactive: it has an interface for managing specific tasks or getting info about the processes running. I searched through the guard help to find the &lt;code&gt;--no-interactions&lt;/code&gt; flag and this solved my problem. My new complete Procfile is now&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="ss"&gt;latex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;latexmk&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pvc&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;pdf&lt;/span&gt; &lt;span class="no"&gt;Thesis&lt;/span&gt;
&lt;span class="ss"&gt;plotting&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;bundle&lt;/span&gt; &lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="n"&gt;guard&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;interactions&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="ruby"></category><category term="guard"></category><category term="foreman"></category><category term="latex"></category></entry><entry><title>Function fitting with lmfit</title><link href="https://mindriot101.github.io/blog/2013/07/04/function-fitting-with-lmfit/" rel="alternate"></link><updated>2013-07-04T18:49:00+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2013-07-04:blog/2013/07/04/function-fitting-with-lmfit/</id><summary type="html">&lt;p&gt;&lt;a href="http://www.scipy.org/"&gt;Scipy&lt;/a&gt; contains functions for fitting equations with &lt;a href="http://www.python.org"&gt;Python&lt;/a&gt;, in its &lt;code&gt;scipy.optimize&lt;/code&gt; module. The two main ones I've used in the past are &lt;code&gt;leastsq&lt;/code&gt; and &lt;code&gt;curve_fit&lt;/code&gt;, which in itself is a convenience wrapper around &lt;code&gt;leastsq&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;curve_fit&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;For this operation you require three (four) things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a function to fit of form &lt;code&gt;f(x, *params)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; data&lt;/li&gt;
&lt;li&gt;&lt;code&gt;y&lt;/code&gt; data&lt;/li&gt;
&lt;li&gt;Optionally error data&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also supply an initial guess with the &lt;code&gt;p0&lt;/code&gt; argument.&lt;/p&gt;
&lt;p&gt;For example a simple linear equation&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;    Fit a linear function y = a * x + b&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;  &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;

&lt;span class="c"&gt;# Load the data to fit into x, y and e arrays&lt;/span&gt;

&lt;span class="n"&gt;p0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;popt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pcov&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curve_fit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sigma&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p0&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;p0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this example &lt;code&gt;popt&lt;/code&gt; contains the "optimal" results, and &lt;code&gt;pcov&lt;/code&gt; the covariance array after fitting.&lt;/p&gt;
&lt;h2&gt;The problem&lt;/h2&gt;
&lt;p&gt;This method of working is very powerful but you cannot place limits on the extent of the input fitting parameters, and you are locked into using the &lt;code&gt;leastsq&lt;/code&gt; underlying function with this nice interface. For example the function&lt;/p&gt;
&lt;p&gt;$$
f(x) = x^a
$$&lt;/p&gt;
&lt;p&gt;will explode and the fitting routine will complain when asked to fit around &lt;code&gt;a = 0&lt;/code&gt; when &lt;code&gt;x = 0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;lmfit&lt;/code&gt; provides this functionality in a convenient object-oriented interface. The function to fit is phrased a little differently but the functionality is the same.&lt;/p&gt;
&lt;p&gt;The easiest way is to write out the desired function as with &lt;code&gt;curve_fit&lt;/code&gt; and include a "residuals" wrapper to calculate the normalised (if errors are given) distance away from the model&lt;/p&gt;
&lt;p&gt;$$
R = \frac{y - m}{\sigma}
$$&lt;/p&gt;
&lt;p&gt;where $R$ are the residuals, $y$ are the observed y values, $m$ the values as calculated by the function that's being fitted, and $\sigma$ the uncertainties. These residuals tested so that the square of the value above is minimised. The functional form of the residuals function is a little different, and parameters must be accessed with a dictionary lookup and the attribute &lt;code&gt;value&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;lmfit&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;resids&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;    Given the function f outlined above, return the normalised residuals&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;

    &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;

&lt;span class="c"&gt;# generate the input parameters&lt;/span&gt;
&lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lmfit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Parameters&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lmfit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;minimize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resids&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above code alters the &lt;code&gt;params&lt;/code&gt; object in place so the best fit parameters are given with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Best fit a: {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Best fit b: {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The uncertainties can be accessed with the &lt;code&gt;stderr&lt;/code&gt; parameter. A nice report can be printed with &lt;code&gt;lmfit.report_fit(params)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Crucially the initial values for the parameter guesses as well as bounds and (something I've not explored much) functional relationships between them. This is a simple way of applying some basic Bayesian priors to the parameter assumptions.&lt;/p&gt;</summary><category term="science"></category><category term="python"></category></entry><entry><title>Conference notes</title><link href="https://mindriot101.github.io/blog/2013/06/10/conference-notes/" rel="alternate"></link><updated>2013-06-10T11:23:00+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2013-06-10:blog/2013/06/10/conference-notes/</id><summary type="html">&lt;p&gt;This is not a blog post as such, it's the notes that I took during the conference split up into sections. Unfortunately there is no reference to the talk content itself; this is kept in the booklet which I have sitting next to me as I type this.&lt;/p&gt;
&lt;h2&gt;Session 1&lt;/h2&gt;
&lt;h3&gt;Detecting and characterising via direct imaging&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;More than 2Gyr gas giants more than 10^8 times fainter than primary&lt;/li&gt;
&lt;li&gt;Young stars are 10^4 - 10^7 times better than this&lt;/li&gt;
&lt;li&gt;Chronograph for increasing contrast&lt;/li&gt;
&lt;li&gt;Speckle noise a big problem&lt;ul&gt;
&lt;li&gt;for speckle based data S/N does not increase with time&lt;/li&gt;
&lt;li&gt;angular differential imaging&lt;ul&gt;
&lt;li&gt;speckles oscillate while image rotates, but keep similar shape&lt;/li&gt;
&lt;li&gt;real objects will move in the frame&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A stars good targets despite being bright&lt;ul&gt;
&lt;li&gt;higher hosting fraction for giant planets for A stars (not sure about this)&lt;/li&gt;
&lt;li&gt;high profile detections &lt;/li&gt;
&lt;li&gt;Nielsen show low host fraction despite this&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;M stars also good targets&lt;ul&gt;
&lt;li&gt;despite low independent host fraction&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Typical contrasts - 10^5 at 1 arcsecond (with NICI)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Physical properties (atmospheres)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Direct photons detected from these objects&lt;ul&gt;
&lt;li&gt;reflected light and background contaminants surely?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Colours in infra-red shows deviations from the predicted T dwarf type sequence (brightness vs colour)&lt;ul&gt;
&lt;li&gt;more like L dwarfs&lt;/li&gt;
&lt;li&gt;much lower surface gravity&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Direct spectra taken (!)&lt;/li&gt;
&lt;li&gt;Huge spectral diversity for planets even in same system&lt;/li&gt;
&lt;li&gt;Surface gravity strongly affecting the spectra&lt;/li&gt;
&lt;li&gt;Orbits of Beta Pic 2 - Chauvin et al. 2012&lt;ul&gt;
&lt;li&gt;most probable semi major axis&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Architecture&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Upper limits to abundance&lt;/li&gt;
&lt;li&gt;Cold start - less than  10% for separations 20 - 630 AU&lt;/li&gt;
&lt;li&gt;Hot start - less than 10% for separations 10 - 810 AU&lt;/li&gt;
&lt;li&gt;Gravitational instability planets rare at more than 10 AU&lt;/li&gt;
&lt;li&gt;Scattering planets also rare&lt;/li&gt;
&lt;li&gt;Sphere project - 10 - 80 more planets&lt;/li&gt;
&lt;li&gt;Possible detection of Super-Earth around nearby M dwarf (Crossfield, Goyon et al. 2013)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Summary&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Young exoplanets have red colours consistent with dusty clouds and non-equilibrium chemistry&lt;/li&gt;
&lt;li&gt;Hot start gas giant planets more than 4 MJup rare at more than 10AU&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;International deep planet survey&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Homogeneous analysis methods &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;SEEDS&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Strategic Explorations of Exoplanets and discs with Subaru&lt;/li&gt;
&lt;li&gt;Variety in morphology of protoplanetary discs&lt;ul&gt;
&lt;li&gt;gaps, non-uniform shapes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IRD - IR doppler instrument on Subaru&lt;ul&gt;
&lt;li&gt;could be good for follow up for NGTS, investigate this&lt;/li&gt;
&lt;li&gt;&lt;a href="http://adsabs.harvard.edu/abs/2012SPIE.8446E..1TT"&gt;paper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Hershell dust evolution in discs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;SED modelling and Herschel tracing dust evolution in discs&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Planet formation in evolving protoplanetary discs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Gas dominates planetary formation&lt;/li&gt;
&lt;li&gt;Planets form in evolving discs&lt;/li&gt;
&lt;li&gt;Disc dispersal quick and efficient&lt;ul&gt;
&lt;li&gt;relatively few systems found with partial discs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Accretion in disc core, with photoevaporation at higher disc heights&lt;/li&gt;
&lt;li&gt;Changes in disc structure can form traps for dust or planets&lt;/li&gt;
&lt;li&gt;Final gas disc dispersal halts planet migration&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Giant planet migration can be halted if the disc gas is dispersed&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;RDA &amp;amp; Armitage 2009&lt;/em&gt;, RDA and Pascucci 2012&lt;/li&gt;
&lt;li&gt;Pile up observed in models and data at 1-2AU&lt;ul&gt;
&lt;li&gt;looks like a possible pile up at smaller separations also&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Disc inhomogeneities and the origins of planetary system architectures and observational properties&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Discs have 3 types of planet trap&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;HST/STIS imaging of Fomaulhaut: New main belt structure and confirmation of Fomalhaut b’s eccentric orbit&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Highly eccentric 0.8&lt;/li&gt;
&lt;li&gt;A ~= 1.77&lt;/li&gt;
&lt;li&gt;Periastron: 32AU&lt;/li&gt;
&lt;li&gt;P ~= 1700 years&lt;/li&gt;
&lt;li&gt;Dynamically linked with belt&lt;ul&gt;
&lt;li&gt;mutual inclination (planet - belt) ~ 17 degrees&lt;/li&gt;
&lt;li&gt;Periastron linked&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Gap in main belt of ~50AU&lt;/li&gt;
&lt;li&gt;Inner belt detected&lt;/li&gt;
&lt;li&gt;Planet planet scattering: Chatterjee et al. 2008&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Highlights of Exoplanet Characterization&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Planets are diverse in Teff(planet) vs IR colour, no clear pattern yet&lt;/li&gt;
&lt;li&gt;Uranus and Neptune heavily enriched in carbon (50x) &lt;ul&gt;
&lt;li&gt;also very old, about 50K&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Consistent non-detection of CO in GJ436&lt;/li&gt;
&lt;li&gt;Featureless atmosphere of GJ1214b suggests high mean molecular weight &lt;ul&gt;
&lt;li&gt;dramatic cloud obscuration&lt;/li&gt;
&lt;li&gt;high water constituent&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Low mass planets may have high Zenv (metal fraction of the envelope)&lt;/li&gt;
&lt;li&gt;GJ3470b - Uranus analogue&lt;/li&gt;
&lt;li&gt;GJ436b has dayside and transit data breaking atmospheric degeneracy&lt;/li&gt;
&lt;li&gt;Comparisons of C/O ratio for star and planet v. interesting&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Planets around low mass stars (PALMS) high contrast imaging survey&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Link with microlensing&lt;/li&gt;
&lt;li&gt;Snapshot program - breadth not width&lt;/li&gt;
&lt;li&gt;Gravity-dependant L to T dwarf transition&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Session 2&lt;/h2&gt;
&lt;h3&gt;Review&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Radio maps more than 95% of mass&lt;ul&gt;
&lt;li&gt;good for structure&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Triggered planet formation in action: resolved gas and dust images of a transitional disk and its activity&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Surface density excess after a planetary body traps large dust particles in a potential maximum&lt;/li&gt;
&lt;li&gt;Increased density leads to planet formation&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Session 3&lt;/h2&gt;
&lt;h3&gt;Review - The story of planets: anchoring numerics to reality&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Hubble protoplanetary disk atlas - nice pictures&lt;/li&gt;
&lt;li&gt;Disc gaps depend on grain size - different wavelengths probe grain size and gap width&lt;/li&gt;
&lt;li&gt;Grain growth drives planetessimal (~km sized) formation &lt;ul&gt;
&lt;li&gt;not reliable&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pairwise accretion - slow, turbulence high, has issues&lt;ul&gt;
&lt;li&gt;requires velocity dispersion/distribution in simulations&lt;ul&gt;
&lt;li&gt;mean velocity is not enough for an accurate simulation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;requires grain size distribution&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pressure bumps trap dust&lt;ul&gt;
&lt;li&gt;leads to further processes, gravitational instability, accretion&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Accretion very low fraction of simulated collisions&lt;/li&gt;
&lt;li&gt;Dust distribution dependant on planetessimal eccentricity&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Zooming in on protoplanetary discs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Magnetic fields in star forming region does not create planar disc initially&lt;ul&gt;
&lt;li&gt;vertical structure is created&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Free-fall accretion guided by magnetic field&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Planetessimal formation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Disc cross section &lt;ul&gt;
&lt;li&gt;core stable&lt;/li&gt;
&lt;li&gt;edges suffer instability&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Planet trend with instability&lt;ul&gt;
&lt;li&gt;mostly requires &lt;em&gt;local&lt;/em&gt; Disk metalicity, could be super-solar&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Session 5&lt;/h2&gt;
&lt;h3&gt;A decade and a half of AngloAustralian Planet Searching&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;240 stars sample over 15 years&lt;/li&gt;
&lt;li&gt;2.5 meters per second precision&lt;/li&gt;
&lt;li&gt;HD 20782 - highest eccentricity 0.952&lt;/li&gt;
&lt;li&gt;Wittenmyer et al., 2011, apj - reference for false rv signal testing&lt;/li&gt;
&lt;li&gt;R ~ 60000 - S/N needs to be 5000&lt;/li&gt;
&lt;li&gt;FunnelWeb - spectra of all stars V less than 12, delta less than 20, 390-800nm
&lt;em&gt;Very nice talk&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;The Debiased Kuiper Belt: Our Solar System as a Debris disc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;20% large KBOs more than  100km are in resonance with Neptune&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Planets and Stellar Activity: Hide and Seek in the CoRoT-7 system&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Active granulation effects for RV&lt;ul&gt;
&lt;li&gt;bright blue cells dominate cool red cells = net blueshift&lt;/li&gt;
&lt;li&gt;creates RV signal of ~ 1m/s&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use lightcurve without transits to provide activity profile&lt;ul&gt;
&lt;li&gt;simultaneous observations&lt;/li&gt;
&lt;li&gt;RV profile then contains both stellar noise and planet&lt;/li&gt;
&lt;li&gt;use lightcurve as basis function&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Properties of the young gas giant planet Beta Pictoris b&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Planet on inclined orbit around star, inclined wrt disc&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Characterizing the Demographics of Exoplanet Bulk Compositions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;New kepler mass radius relations with Keck&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Unveiling an exoplanetary Neptunian atmosphere through multiband transit photometry&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Infra-red used to measure bands H2O, CO, CH4&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;The Shocking Variability of Exoplanet Transits&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;WASP-12 b bow shock in the infra-red&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Session 6&lt;/h2&gt;
&lt;h3&gt;Debris discs as components of extrasolar planetary systems&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Debris disc descendant of protoplanetary disc&lt;/li&gt;
&lt;li&gt;Proplyds&lt;ul&gt;
&lt;li&gt;less than 10MYr&lt;/li&gt;
&lt;li&gt;optically thick&lt;/li&gt;
&lt;li&gt;more than 10 Mearth&lt;/li&gt;
&lt;li&gt;~100x dust mass&lt;/li&gt;
&lt;li&gt;dust from 0.1-100AU&lt;/li&gt;
&lt;li&gt;primordial?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Debris&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;10MYr -10Gyr&lt;/li&gt;
&lt;li&gt;optically thin&lt;/li&gt;
&lt;li&gt;less than 1 MEarth&lt;/li&gt;
&lt;li&gt;no gas&lt;/li&gt;
&lt;li&gt;~30AU ring&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Inner holes caused by planets?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Inner edge of disc predicted to be carved by planets&lt;ul&gt;
&lt;li&gt;shape of the edge depicted by planet mass&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CO short lifetime ~100 years due to photo-disassociation&lt;/li&gt;
&lt;li&gt;Clump in disc&lt;ul&gt;
&lt;li&gt;could be through planet orbit and gravitaitonal influence&lt;/li&gt;
&lt;li&gt;could be a destruction event causing debris to pass through the same point leading to higher density&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Alma probes mm sized dust - traces planetessimals&lt;/li&gt;
&lt;li&gt;Scattered light probes micron sized dust&lt;/li&gt;
&lt;li&gt;Systems with planets are brighter (SKARPS, Herschel) than systems without implying debris discs&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;A Resolved Millimeter Emission Belt in the AU Mic Debris disc&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Best fit model suggests increasing surface density with radial distance&lt;ul&gt;
&lt;li&gt;inner collision depletion?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Detailed model of the exozodiacal disc of Fomalhaut and its origin&lt;/h3&gt;
&lt;h3&gt;Final Results of the Herschel Open Time Key Programme DUNES&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;16 resolved discs, 13 new&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Session 7&lt;/h2&gt;
&lt;h3&gt;Review&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Morbidelli+ 2009, planetessimal simulation&lt;/li&gt;
&lt;li&gt;Rafikov 2004, proposed explanation of accelerated core accretion&lt;ul&gt;
&lt;li&gt;neptune in less than 10Myr&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Rapid growth of giant planet cores by pebble accretion&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Pebble accretion can rapidly grow the planet mass and deal with collapse, according to the model&lt;/li&gt;
&lt;li&gt;Author: Lambrechts&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Planet Formation and Evolution in Traps: Origins of the MassPeriod Relation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Traps catch planets while forming&lt;/li&gt;
&lt;li&gt;Rapid envelope accretion process&lt;/li&gt;
&lt;li&gt;Model predicts that super earths are failed jovian cores&lt;/li&gt;
&lt;li&gt;Putdritz model looks interesting&lt;ul&gt;
&lt;li&gt;predictions for hot Jupiter formation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Giant planets start at greater than 0.7Msolar&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Session 8 - evolution of planetary systems&lt;/h2&gt;
&lt;h3&gt;Review&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Interesting deficit of period ratios in Kepler dataset just below 2:1&lt;/li&gt;
&lt;li&gt;Resonances cause oscillations of the periastron points of a multiple system&lt;ul&gt;
&lt;li&gt;non-resonances cause circulation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If the system is not stable with aligned systems (angle of periastrons equal) then all other configurations will be unstable&lt;/li&gt;
&lt;li&gt;No close encounter required&lt;/li&gt;
&lt;li&gt;Hill radius associated with circular orbits&lt;/li&gt;
&lt;li&gt;Dissipation acts to stabilise systems&lt;/li&gt;
&lt;li&gt;HAT-P-13 is multiple planet system&lt;ul&gt;
&lt;li&gt;why does WASP not find any?&lt;/li&gt;
&lt;li&gt;consider changing wasp pipeline to subtract the in-transit data and re-perform search N times&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MMR Lithwick&lt;/li&gt;
&lt;li&gt;Could the Kepler distance from pure resonances be due to unseen non-transiting bodies?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Constraining planetary migration mechanisms in systems of giant planets&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Dawson and Johnson 2012 - predicting eccentricity from Kepler lightcurves&lt;/li&gt;
&lt;li&gt;Metal-poor and metal-rich lead to disk migration&lt;ul&gt;
&lt;li&gt;only metal rich stars form multiple systems&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Fressin et al. 2013 - kepler occurrence rates&lt;/li&gt;
&lt;li&gt;Possible pile up at short periods for metal rich Kepler host stars&lt;/li&gt;
&lt;li&gt;How do eccentric planets in the period valley between 0.1 and 1 AU form?&lt;/li&gt;
&lt;li&gt;Planet planet scattering possibly ejecting outer planet removing it from evidence for it&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;The Impact of Stellar Multiplicity on Planetary Systems&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;High protoplanetary disc occurrence for wide binary planets&lt;ul&gt;
&lt;li&gt;distinct decrease below binary star separations of ~40AU&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Similarly decreasing disc mass with decreasing orbital separation&lt;/li&gt;
&lt;li&gt;RV surveys biased against binary stars due to the stray light from the binary companion in the slit&lt;/li&gt;
&lt;li&gt;Only equal flux binaries at short separations&lt;ul&gt;
&lt;li&gt;selection effect?&lt;ul&gt;
&lt;li&gt;maybe planets form around the fainter secondary and are therefore harder to detect so we don't find them&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Orbital structure of Kepler Planetary Systems&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Low mass planets targeted for the talk&lt;ul&gt;
&lt;li&gt;less than ~30Mearth&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Fortney 07 density structures&lt;/li&gt;
&lt;li&gt;Bimodal small radius distribution &lt;ul&gt;
&lt;li&gt;can be split by the x-ray exposure&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TTV mass estimations extremely sensitive to eccentricity&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Archaeology of Exo-Terrestrial Planetary Systems&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;RECONS project - spectral types within 10pc&lt;/li&gt;
&lt;/ul&gt;</summary><category term="astronomy"></category><category term="travel"></category></entry><entry><title>Flight back</title><link href="https://mindriot101.github.io/blog/2013/06/08/flight-back/" rel="alternate"></link><updated>2013-06-08T16:00:00+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2013-06-08:blog/2013/06/08/flight-back/</id><summary type="html">&lt;p&gt;I'm currently on the plane back, flying over Canada at about 922km/h as the in-flight computer (android tablet in the back of the seat in front of me) says.&lt;/p&gt;
&lt;p&gt;I'm sitting next to a nice chinese couple, who don't speak a word of English. They asked me through vague hand gestures to fill out their immigration card. It was quite an ordeal! &lt;/p&gt;
&lt;p&gt;Back home now after a good conference, got lots of nice pictures of Vancouver, but am quite tired now. &lt;/p&gt;</summary><category term="astronomy"></category><category term="travel"></category></entry><entry><title>Last day</title><link href="https://mindriot101.github.io/blog/2013/06/08/last-day/" rel="alternate"></link><updated>2013-06-08T08:45:00+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2013-06-08:blog/2013/06/08/last-day/</id><summary type="html">&lt;p&gt;The last day has come and gone. I didn't get time yesterday to write about it so I'm doing it now while I sit in front of the A-team in a Canadian hostel.  As a side note this film looks terrible.&lt;/p&gt;
&lt;p&gt;We had some of the most interesting talks of the day yesterday, talking about planet migration and feasibility studies. Some cool stuff but I still don't have a disc migration based theory to explain the Rossiter-McLaughlin effect.
A quite sensible talk was about the formation of hot Jupiters and how the primary migration mechanism is based on the host star (or disc) metalicity. Low metalicity stars can only cause hot Jupiters to migrate through type II migration due to lack of metals from which extra planets can be formed. High metalicity stars can support the same process, as well as dynamical formation as more planets will have formed from the protoplanetary disc. It kinda makes sense in my mind.&lt;/p&gt;
&lt;p&gt;After the conference I met a nice Chinese man on the bus to the ferry and we traveled together until I got to my stop on the sky line. He was in educational research and worked in Ottawa, and we had a nice trip.&lt;/p&gt;
&lt;p&gt;I got into my hostel and went to get some dinner. I went back to the same place Dave, John and I went on the last night as I knew it'd be good, and I could sit somewhere and pass the time. I ended up eating at the bar and sat next to a couple who ended up introducing themselves to me and we spent the rest of the night drinking and talking. It was a lot of fun!&lt;/p&gt;
&lt;p&gt;I'm currently drinking my coffee, and getting ready to go out and explore Vancouver. The weather has finally turned and it looks pretty cloudy outside, but I'm English so my shorts and sandals are making a guest appearance one last time. Soon I'll be back in England a day later than I left and probably not going to be very communicative.&lt;/p&gt;</summary><category term="astronomy"></category><category term="travel"></category></entry><entry><title>Victoria museum</title><link href="https://mindriot101.github.io/blog/2013/06/06/victoria-museum/" rel="alternate"></link><updated>2013-06-06T23:08:00+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2013-06-06:blog/2013/06/06/victoria-museum/</id><summary type="html">&lt;p&gt;Today's lectures were about... you guessed it: discs! A lot of people find them interesting apparently! Anyway the talks were ok, some good some bad. One in particular involved formation theories that seemed to explain the observed distributions well; I wanted to ask about selection effects but thought I'd find him afterwards. I didn't have time in the end but it was very interesting.&lt;/p&gt;
&lt;p&gt;Coffee was taken up by talking to a postdoc at UNSW about dynamical stability. We chatted for a while and it was nice. Lunch was an amazing experience: we heard about a great fish and chips place down by the harbour. It was not more than a shack and we were warned of the queues. We thought nothing of it and with a 2 hour lunch break had plenty of time. So we went down and queued for a while. A while being 1 hour 15 minutes. In the sun. I don't get sunburnt very much but my face is quite red right now! By the time we'd finished eating it was time to return to the conference centre and resume the day. IT was fantastic food though, I'd recommend it if you're visiting and have a couple of hours over lunch to space.&lt;/p&gt;
&lt;p&gt;After the sessions were over we went to the conference banquet at the Victoria museum. A very nice place, with interesting exhibits about the local history of Canada. There was a nice timeline explaining some key events in Canada's, and Victoria's past. The food was a buffet style affair with tables set with sushi, dumplings, meats on skewers and fish. Quite a selection, though we had one free drink each and the subsequent were quite expensive!  I talked to a nice guy about his research and how one could go about observing it. A quite unusual idea for a conference banquet, not quite the formal dinner around tables that we'd expected.&lt;/p&gt;
&lt;p&gt;So we come to the downside of the day: the price of the banquet. $90 Canadian for the dinner. Yeah.&lt;/p&gt;</summary><category term="astronomy"></category><category term="travel"></category></entry><entry><title>Bike ride of the century</title><link href="https://mindriot101.github.io/blog/2013/06/05/bike-ride-of-the-century/" rel="alternate"></link><updated>2013-06-05T23:36:00+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2013-06-05:blog/2013/06/05/bike-ride-of-the-century/</id><summary type="html">&lt;p&gt;Today's schedule was short, we had the afternoon off to do whatever we wished. Actually the conference organisers offered to put on a trip of some sort after a vote to find out the most popular choice, but that fell through as organising such a mammoth activity would be too difficult.&lt;/p&gt;
&lt;p&gt;This session was the most relevant to me and my work, as it involved the observational side of things. We had some great talks from some friends of mine, and other colleagues in the field.&lt;/p&gt;
&lt;p&gt;A very interesting talk was given about statistically ascertaining the point at which planets become gassy, through probabilities. Another was about bow shocks around giant planets, and another was a method to use simultaneous RV and transit methods to reduce stellar noise effects.&lt;/p&gt;
&lt;p&gt;But the crowning glory of today was the afternoon bike ride and subsequent dinner/pub. We cycled around 30km int he end (about 19 miles in old money) around the south of Vancouver island. Very nice scenery. We had tapas for dinner, followed by a nice pub trip;.&lt;/p&gt;
&lt;p&gt;A good day in all&lt;/p&gt;</summary><category term="astronomy"></category><category term="travel"></category></entry><entry><title>Discs, discs and more discs</title><link href="https://mindriot101.github.io/blog/2013/06/04/discs-discs-and-more-discs/" rel="alternate"></link><updated>2013-06-04T22:11:00+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2013-06-04:blog/2013/06/04/discs-discs-and-more-discs/</id><summary type="html">&lt;p&gt;So today we learnt about discs, as the title of this post may suggest. We had protoplanetary discs (or proplyds which is a horrible portmanteau), thin discs, thick discs, transitional discs...&lt;/p&gt;
&lt;p&gt;This mostly involved theorists and simulations working their hardest, but we did get a few observational results thrown in for good measure. To be fair it's a simulation type topic, current methods are not powerful enough without some serious and therefore expensive time on the largest telescopes. Some nice analysis advances are being made but for once&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; observationalists have to play catch up.&lt;/p&gt;
&lt;p&gt;We finished with a public talk from Debra Fischer and a slightly US-centred view on the history of exoplanet discovery. There was one nice picture of Mayor and Queloz by the telescope. A good day in all.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;I am exaggerating here for effect.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="astronomy"></category><category term="travel"></category></entry><entry><title>First day</title><link href="https://mindriot101.github.io/blog/2013/06/03/first-day/" rel="alternate"></link><updated>2013-06-03T23:37:00+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2013-06-03:blog/2013/06/03/first-day/</id><summary type="html">&lt;p&gt;So the first day has just finished. We had some interesting talks (and some not so interesting, but that's to be expected).&lt;/p&gt;
&lt;p&gt;The first session - before lunch - was dedicated to direct imaging, which is really taking off as a field, with advancements in technology and analysis tools since I last updated myself on the field. Being able to directly see protoplanetary disks is a new idea for me. &lt;/p&gt;
&lt;p&gt;The idea I liked the most was a clever way to detect a secondary body around the star. The complex optics and stellar flux removal techniques leave a noise characteristic pattern around where the star once was. This changes from frame to frame but fundamentally does not really change shape. A moving planet however does change position. The "speckle" pattern does not care about the orientation of the ccd so the field of view rotating will appear the same. By observing whilst the field rotates and then stacking the frames aligning them by the orientation of the frames provides a clear target which stands out from the background.&lt;/p&gt;
&lt;p&gt;After lunch was a session on disks, with lots of hydrodynamical simulations and the like. All quite complex, but some ground-breaking results. An observation of an almost completely asymmetrical disk with a proposed explanation. This doesn't sound particularly exciting when I write this but it was quite cool. IF my memory was better I'd write it up a little better.&lt;/p&gt;
&lt;p&gt;Anyway about to go to sleep now, another busy day tomorrow with a public talk given by Debra Fischer, most likely announcing new results from Kepler which could be interesting given its current state.&lt;/p&gt;</summary><category term="astronomy"></category><category term="travel"></category></entry><entry><title>Victoria ferry</title><link href="https://mindriot101.github.io/blog/2013/06/02/victoria-ferry/" rel="alternate"></link><updated>2013-06-02T12:43:00+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2013-06-02:blog/2013/06/02/victoria-ferry/</id><summary type="html">&lt;p&gt;The ferry from Vancouver to Vancouver island (not &lt;em&gt;Victoria island&lt;/em&gt;, as I've been told) was amazing. The scenery was breathtaking, photos of which I shall upload later. The little islands around Vancouver island were amazing to see, really fantastic. The map is centred on Victoria itself but the islands are to the north east.&lt;/p&gt;
&lt;iframe width="425" height="350" frameborder="0" scrolling="no" marginheight="0" marginwidth="0" src="https://maps.google.com/maps?f=q&amp;amp;source=s_q&amp;amp;hl=en&amp;amp;geocode=&amp;amp;q=48.4328+-123.3347&amp;amp;aq=&amp;amp;sll=48.736267,-123.318787&amp;amp;sspn=1.132137,2.219238&amp;amp;ie=UTF8&amp;amp;ll=48.4328,-123.3347&amp;amp;spn=1.136136,2.219238&amp;amp;t=m&amp;amp;z=9&amp;amp;output=embed"&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;br /&gt;&lt;small&gt;&lt;a href="https://maps.google.com/maps?f=q&amp;amp;source=embed&amp;amp;hl=en&amp;amp;geocode=&amp;amp;q=48.4328+-123.3347&amp;amp;aq=&amp;amp;sll=48.736267,-123.318787&amp;amp;sspn=1.132137,2.219238&amp;amp;ie=UTF8&amp;amp;ll=48.4328,-123.3347&amp;amp;spn=1.136136,2.219238&amp;amp;t=m&amp;amp;z=9" style="color:#0000FF;text-align:left"&gt;View Larger Map&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;We're sitting on a coach waiting to depart to Victoria town centre, ready to find our hotel and work out where the conference centre is. &lt;/p&gt;</summary><category term="astronomy"></category><category term="travel"></category></entry><entry><title>Hostel ahoy</title><link href="https://mindriot101.github.io/blog/2013/06/01/hostel-ahoy/" rel="alternate"></link><updated>2013-06-01T17:49:00+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2013-06-01:blog/2013/06/01/hostel-ahoy/</id><summary type="html">&lt;p&gt;So we arrived at the hostel, a very nice place too. I'd recommend it if I could be bothered to find out what it is. I'll try and remember to insert a reference here:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.hihostels.ca/westerncanada/170/hi-vancouver_central.hostel"&gt;Reference&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So yeah nice place. Vancouver is not very exciting so far but as was pointed out to me: the area around the airport is never going to be very nice.&lt;/p&gt;
&lt;p&gt;The public transport on the other hand seems excellent so far. I'll not get much of a chance to test it out, but from what I've seen so far it's excellent. Fantastic public transport to and from the airport, something London sorely needs.&lt;/p&gt;
&lt;p&gt;The city itself looks pretty good too, some fancy shops with names I've never heard of, and Claire's accessories of course. That infects every city it touches these days, but that's another topic for another day.&lt;/p&gt;
&lt;p&gt;We're just about to go get some food and some drinks. I've been up since 6am which makes the writing of this post the 20th hour of being awake. It's not really hitting me yet, but I'm sure I'll sleep well tonight!&lt;/p&gt;
&lt;p&gt;More astronomy to follow, probably.&lt;/p&gt;</summary><category term="astronomy"></category><category term="travel"></category></entry><entry><title>At the airport</title><link href="https://mindriot101.github.io/blog/2013/06/01/at-the-airport/" rel="alternate"></link><updated>2013-06-01T11:34:00+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2013-06-01:blog/2013/06/01/at-the-airport/</id><summary type="html">&lt;p&gt;So we're at the airport. Mostly uneventful journey so far, luckily. Airports terrify me; flying doesn't scare me at all, but the chance of being rejected for something as simple as forgetting your passport is so unnerving.&lt;/p&gt;
&lt;p&gt;I've been up since 6am this morning, which is pretty tough. I've managed to get some free wifi at the airport, ironically from BT Openzone which have announced that they're &lt;a href="http://www.bbc.co.uk/news/technology-22728977"&gt;closing to O2 customers&lt;/a&gt;. This is ironic for two reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;As an O2 customer I was not aware of this ability before today (ok this is not technically irony)&lt;/li&gt;
&lt;li&gt;I'm checking the internet through BT OpenZone as we speak!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In other news, much more sad this time, a co-founder of the fantastic Oculus Rift was announced to be the &lt;a href="http://abclocal.go.com/kabc/story?section=news/local/orange_county&amp;amp;id=9122999"&gt;pedestrian who was killed recently in a police chace&lt;/a&gt;. I'm not sure how this will affect the company, or the development of the rift as a whole; I've not been following development but I've heard some good things about it from many sources.&lt;/p&gt;
&lt;p&gt;About to board the plane soon, then the long flight where my laptop battery will be tested to its limits. Another post soon, providing I can get some time. So much learning to be done.&lt;/p&gt;</summary><category term="astronomy"></category><category term="travel"></category></entry><entry><title>IAUS 299</title><link href="https://mindriot101.github.io/blog/2013/05/31/iaus-299/" rel="alternate"></link><updated>2013-05-31T18:01:00+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2013-05-31:blog/2013/05/31/iaus-299/</id><summary type="html">&lt;p&gt;Tomorrow I fly to Victoria, Canada to attend the &lt;a href="http://www.di.utoronto.ca/research/iaus-299/"&gt;International Astronomical Union Symposium 299&lt;/a&gt;, entitled &lt;em&gt;Exploring the formation and evolution of planetary systems&lt;/em&gt;. I'm presenting a poster, which I may put in the space below for all to see, but to cut a long story short: &lt;em&gt;it's blue&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I get to enjoy a 9.5 hour flight across the Atlantic, mostly by myself and hopefully I'll be blogging about it whilst I'm there, though I may have to go to talks and get quite drunk with my peers. Here's hoping...&lt;/p&gt;</summary><category term="astronomy"></category><category term="travel"></category></entry><entry><title>The :Explore command in vim</title><link href="https://mindriot101.github.io/blog/2013/05/20/the-explore-command-in-vim/" rel="alternate"></link><updated>2013-05-20T00:00:00+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2013-05-20:blog/2013/05/20/the-explore-command-in-vim/</id><summary type="html">&lt;p&gt;In &lt;code&gt;vim&lt;/code&gt; a useful command is the &lt;code&gt;:Explore&lt;/code&gt;, which opens the netrw browser at the location of the current file. This is especially handy for editing files over &lt;code&gt;ssh&lt;/code&gt;, but is handy for those who don't like the file tree type plugins.&lt;/p&gt;
&lt;p&gt;The command can be shortened to &lt;code&gt;:E&lt;/code&gt; which is fantastic, quickly browse the file system inside vim.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;&lt;img alt="editing" src="{{" title="site.url }}/assets/images/editing-file.png" /&gt;&lt;/p&gt;
&lt;p&gt;This shows this current file in my editor. By pressing &lt;code&gt;:E&lt;/code&gt; we get&lt;/p&gt;
&lt;p&gt;&lt;img alt="local" src="{{" title="site.url }}/assets/images/local-contents.png" /&gt;&lt;/p&gt;
&lt;p&gt;and by selecting &lt;code&gt;..&lt;/code&gt; twice I get the top level of this blog&lt;/p&gt;
&lt;p&gt;&lt;img alt="blog" src="{{" title="site.url }}/assets/images/blog-contents.png" /&gt;&lt;/p&gt;
&lt;p&gt;The usual vim search commands are available for finding files so I encourage you to check it out.&lt;/p&gt;</summary><category term="vim"></category></entry><entry><title>Dark Souls magic</title><link href="https://mindriot101.github.io/blog/2013/03/15/dark-souls-magic/" rel="alternate"></link><updated>2013-03-15T00:00:00+01:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2013-03-15:blog/2013/03/15/dark-souls-magic/</id><summary type="html">&lt;p&gt;I was sceptical when I first stepped into the land of Lordran and perished at the hands of yet
another undead nightmare hunting me, for I assume I'd angered it in some way. I do not know what I
did to annoy this poor hollowed creature but it wanted my blood so I unburdened it of the strange
life force causing it to attack me so. I had already died to it many times but this time I managed
to vanquish the foe and move on...&lt;/p&gt;
&lt;p&gt;...to the next foe and subsequently die at its cold hands. This pattern repeated itself for quite a
while until finally I managed to defeat the Asylum Demon and escape that wretched place.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;&lt;img alt="darksouls" src="{{" title="site.url }}/assets/images/darksouls.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;There was something magical about that experience that, now that I've finished the game a few times,
I thought I'd never get back. Something part encouraging, like making progress in a puzzle; and part
infuriating, repeating the same part over and over again, but I knew that the game was not at fault.
It was me, I had to change my approach. Maybe switch out my equipment or take things slowly.&lt;/p&gt;
&lt;p&gt;A great design of the game which I'm sure is deliberate is preying on human nature where, for
example in video games, we encounter something difficult, only to fail at completing the task; we
rush in recklessly only to fail again. The more we try the more frustrated we become and the worse
we play.  Dark Souls forces you to take a few minutes, calm down and &lt;em&gt;think&lt;/em&gt; about the situation: is
rushing in head on really the best solution, maybe I should draw the enemies closer to me one at a
time and pick them off, maybe I should get my bow out and snipe, wearing the group down until I can
pass through.&lt;/p&gt;
&lt;p&gt;This is compounded by the bonfire system which respawns every&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; enemy and forces us to improve our
play. We will not get any better by "saving" our progress at the nearest bonfire. My favourite
example of this is the spell system. You have only a limited number of casts. To get more you need
to rest at the bonfire, but this will respawn the enemies so you have to learn to &lt;em&gt;be more
efficient&lt;/em&gt; with your spells.&lt;/p&gt;
&lt;p&gt;Towards the end of my spell of playing the game I was getting complacent. I knew the
enemies well and could predict their actions. I would still die to the stupidest things, or
unfortunate circumstances, I was not &lt;em&gt;amazing&lt;/em&gt; at the game, just sufficient, but I felt strong.
Worthy of defeating this game widely acknowledged for its difficulty. I had lost the magic that I
felt at first when I played it many months ago.&lt;/p&gt;
&lt;p&gt;Since then I took a break. Not deliberately: other games came and went, and other commitments had to
take priority. &lt;/p&gt;
&lt;p&gt;A few months went by and I got curious. Could I still play the game as well as I used to? Is it like
riding a bike - once you learn you never lose the knack?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;No&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I suck again, dying to the first few hollows I encountered. I'm currently stuck again at the Parish
and that feeling of inadequacy is rushing back to me, where the game is most magical. If there's no
challenge to overcome then are you really playing the right game?&lt;/p&gt;
&lt;p&gt;I've started watching speed runs of the game and this seems an amazing way to keep the PvE section
of the game new and fresh. I delight in telling people that my first playthrough took around 50
hours, and some people can complete it in less than 1. PvP is the other way to sustain this game for
players: generally being a dick and invading poor helpless beginners in Anor Londo (more likely
someone in dark Anor Londo just waiting for fresh meat, or someone on NG+), the PvP arenas in the
Township, or invading in common PvP zones. For a game with no communication beyond predetermined
messages and gestures it's surprisingly easy to convey emotion.&lt;/p&gt;
&lt;p&gt;I genuinely believe that Dark Souls is one of the best games I've played, with amazing amounts of
depth if you search for it. Check out &lt;a href="http://www.youtube.com/playlist?list=PL4825DBA198EBE9B9"&gt;EpicNameBro's amazing lore series&lt;/a&gt;, or &lt;a href="http://www.youtube.com/playlist?list=PLWLedd0Zw3c5RCXboUsPwHsZJlXB2CzCz"&gt;VaatiVidya's Prepare To Cry series&lt;/a&gt; for lore discussion, &lt;a href="http://www.youtube.com/user/UberGusMage/videos?flow=grid=0"&gt;UberGoose's speedrunning&lt;/a&gt; to see just how much possibility there is for extending the game. &lt;/p&gt;
&lt;p&gt;The depth to the character build system is immense, the range of techniques that you can employ are
diverse and always fun. Create a sorcerer only build, using magic only. Or set yourself some
challenges like (my current build) a no-shield run&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;. This will teach yourself to dodge
effectively as endorsed by &lt;a href="http://www.youtube.com/user/vageta311"&gt;Vageta311&lt;/a&gt;, check out his amazing
&lt;a href="http://www.youtube.com/playlist?list=PL5CC8A65E1E0EB80D"&gt;Everything possible before the gargoyles&lt;/a&gt;
series for a real eye-opener to the game and just how much is possible.&lt;/p&gt;
&lt;p&gt;Alternatively take a break for a few months. Let your ability die down and regain that magic for
yourself.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;nearly&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;probably not wise to challenge myself after such a long break in my playing&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="dark souls"></category></entry><entry><title>Cross site REST development</title><link href="https://mindriot101.github.io/blog/2013/03/10/cross-site-rest-development/" rel="alternate"></link><updated>2013-03-10T00:00:00+01:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2013-03-10:blog/2013/03/10/cross-site-rest-development/</id><summary type="html">&lt;p&gt;Often when developing complex client side apps, a simple &lt;code&gt;python -m SimpleHTTPServer&lt;/code&gt; can host the html. For a node backend though, a second server has to be run to host the REST api, which must be on a different domain. For example the python server is on port &lt;code&gt;8000&lt;/code&gt;, whereas the REST server is run on port &lt;code&gt;3000&lt;/code&gt;.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;This will usually throw an error containing the script &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Origin http://localhost:8000 is not allowed by Access-Control-Allow-Origin
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is a security measure input by web browsers to prevent cross domain scripting attacks, and is a good idea, but during development this can be a problem.&lt;/p&gt;
&lt;p&gt;One option is to use a fully featured web server e.g. express but for rich client side applications this is generally overkill, a simpler library such as &lt;a href="http://mcavage.github.com/node-restify/"&gt;restify&lt;/a&gt; is ideal.&lt;/p&gt;
&lt;p&gt;A nice option as supplied by &lt;a href="http://stackoverflow.com/a/14187628/56711"&gt;this&lt;/a&gt; SO answer is to add middleware to allow certain domains access to the REST server.&lt;/p&gt;
&lt;p&gt;For development this is a handy workaround, but for production obviously &lt;em&gt;DO NOT USE!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For restify this can be inserted before your normal CRUD routes as middleware using &lt;code&gt;server.use(...)&lt;/code&gt;.&lt;/p&gt;</summary><category term="python"></category><category term="webdev"></category></entry><entry><title>Application-like websites with fluid</title><link href="https://mindriot101.github.io/blog/2013/03/01/application-like-websites-with-fluid/" rel="alternate"></link><updated>2013-03-01T00:00:00+01:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2013-03-01:blog/2013/03/01/application-like-websites-with-fluid/</id><summary type="html">&lt;p&gt;&lt;a href="http://www.fluidapp.com"&gt;Fluid&lt;/a&gt; is a Mac OSX app which can convert a single website into an application, with its own icon and place in the dock and task switcher. It is a great way to get the desktop like application feel for a web app.&lt;/p&gt;
&lt;p&gt;This works particularly well for single-page apps like &lt;a href="http://mail.google.com"&gt;gmail&lt;/a&gt;, or &lt;a href="http://trello.com"&gt;Trello&lt;/a&gt;. The app can be set to not close the window on close, just hide which leaves gmail running in the background, and lets trello remember the last board you were looking at.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;The amount of customisation is incredible, and user scripts and styles are enabled by default[^1].&lt;/p&gt;
&lt;p&gt;I was a bit skeptical as I noticed quite a high memory usage, but after investigation found that it was only the memory usage for the web app anyway (thank you chrome for your task manager...)&lt;/p&gt;
&lt;p&gt;So I encourage any heavy users of "single page apps" like the ones mentioned above, or any websites in general to get a bit of fluid in your dock.&lt;/p&gt;
&lt;p&gt;... that was awful but I'm too busy to change it...&lt;/p&gt;</summary></entry><entry><title>Stupid programming mistake</title><link href="https://mindriot101.github.io/blog/2013/02/27/stupid-programming-mistake/" rel="alternate"></link><updated>2013-02-27T00:00:00+01:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2013-02-27:blog/2013/02/27/stupid-programming-mistake/</id><summary type="html">&lt;p&gt;So I was coding the other day and had some strange behaviour from one of my Python scripts. I was running two boolean checks which update a variable. Both should be &lt;code&gt;|=&lt;/code&gt; types, but it turns out a &lt;code&gt;!&lt;/code&gt; character looks incredibly similar (to my tired eyes at least) to the &lt;code&gt;|&lt;/code&gt; character which of course is a completely different boolean operator.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Before&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="wrong" src="{{" title="site.url }}/assets/images/wrong.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;After&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="correct" src="{{" title="site.url }}/assets/images/correct.png" /&gt;&lt;/p&gt;
&lt;p&gt;Always something new!&lt;/p&gt;</summary></entry><entry><title>Installing development version of nginx with Homebrew</title><link href="https://mindriot101.github.io/blog/2013/02/25/installing-development-version-of-nginx-with-homebrew/" rel="alternate"></link><updated>2013-02-25T00:00:00+01:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2013-02-25:blog/2013/02/25/installing-development-version-of-nginx-with-homebrew/</id><summary type="html">&lt;p&gt;I have been trying to install nginx v1.3.x on my Macbook Pro for a while now to test the native &lt;a href="http://nginx.com/news/nginx-websockets.html"&gt;websockets support&lt;/a&gt; but I could not find a way to install version 1.3.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;I had a look with &lt;code&gt;brew info nginx&lt;/code&gt; and found a clue: a devel flag:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;formula&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Nginx&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Formula&lt;/span&gt;
    &lt;span class="c1"&gt;# Other code&lt;/span&gt;

    &lt;span class="n"&gt;devel&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://nginx.org/download/nginx-1.3.13.tar.gz&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;sha1&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b09b1c35b2b741292d41db1caa3b8a4123805a4c&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# Other code&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I should really have found this earlier or tried to look harder, but it turns out homebrew has a &lt;code&gt;--devel&lt;/code&gt; flag for the install command. This defines the &lt;code&gt;devel&lt;/code&gt; variable and is caught by the if block above.&lt;/p&gt;
&lt;p&gt;So simple really, but I googled to no avail, so hopefully this post will come up for anyone else who has this problem.&lt;/p&gt;</summary><category term="homebrew"></category><category term="OSX"></category><category term="nginx"></category></entry><entry><title>(node) development on OSX</title><link href="https://mindriot101.github.io/blog/2013/02/24/node-development-on-osx/" rel="alternate"></link><updated>2013-02-24T00:00:00+01:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2013-02-24:blog/2013/02/24/node-development-on-osx/</id><summary type="html">&lt;p&gt;I love my Macbook Pro, for development and general computing use. Before I
purchased it I was a die hard linux user (apart from gaming which is still
dominated by windows unfortunately.) My work involves linux&lt;sup id="fnref:my-job"&gt;&lt;a class="footnote-ref" href="#fn:my-job" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; and I am a
committed &lt;a href="http://vim.org"&gt;vim&lt;/a&gt; user. &lt;/p&gt;
&lt;p&gt;My work colleagues tend to laugh when I say that I want to use my mouse as
little as possible, and that I am quite experienced in command line use. It
pains me every time I see my office mates reach over to the mouse to click the
&lt;em&gt;save&lt;/em&gt; button.&lt;/p&gt;
&lt;p&gt;This workflow does not translate too well to the Mac; as far as I understand it
Apple&lt;sup id="fnref:nextstep"&gt;&lt;a class="footnote-ref" href="#fn:nextstep" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; were one of the first companies to introduce guis for their
operating systems.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;On the other hand I love the user interface, operating system and window/font
rendering systems. It's quality hardware and a fantastic (IMO) keyboard,
coupled with excellent software and makes me feel really good using it. It's
become my main operating system at work now since I code almost exclusively on
my macbook. Occasionally I have to SSH into the work computers to access data
but usually this is from my laptop.&lt;/p&gt;
&lt;p&gt;I also like automation.&lt;/p&gt;
&lt;p&gt;During (node) development I much prefer editing code in my editor and either
seeing it instantly in my browser, or just reloading it myself. For this and
other development, I use a few tools:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://mxcl.github.com/homebrew/"&gt;Homebrew&lt;/a&gt; for package installation&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.boastr.net/?page_id=2342"&gt;Better snap tool&lt;/a&gt; for tiling windows
  side by side&lt;/li&gt;
&lt;li&gt;&lt;a href="http://code.google.com/p/macvim/"&gt;Macvim&lt;/a&gt; for editing, &lt;code&gt;brew install macvim&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.iterm2.com"&gt;iTerm2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/joh/when-changed"&gt;when-changed.py&lt;/a&gt; for
  compiling/running/whatever when files have changed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'll discuss these tools in turn.&lt;/p&gt;
&lt;h2&gt;Homebrew&lt;/h2&gt;
&lt;p&gt;Linux has it's share of problems, which should be classed as more &lt;em&gt;challenges&lt;/em&gt;
than problems as it's fun I assure you. On the other hand it's package
management system is top notch. The Mac OSX equivalent is Homebrew and is
superbly managed with packages on &lt;a href="http://github.com"&gt;github&lt;/a&gt;. This takes the
difficulty out of installing a lot of packages, but is still missing some nice
features.&lt;/p&gt;
&lt;p&gt;The nice thing about Linux's package management is that the packages are
&lt;em&gt;binary&lt;/em&gt; packages, so no compilation is required. They are compiled by someone
with extensive knowledge of the package and operating system - usually the
package maintainer. Packages on Mac OSX still have to be compiled from source
so can take a long time.&lt;/p&gt;
&lt;h2&gt;Better snap tool&lt;/h2&gt;
&lt;p&gt;Having multiple windows open simultaneously is a huge timesaver as you can see
the contents simultaneously. Having multiple monitors is a fantastic but
expensive option, but if on a single window you could resize the windows
yourself but this can be time consuming if it needs to be done many times.&lt;/p&gt;
&lt;p&gt;This tool allows some keyboard shortcuts to resize the windows to take up half
the screen each. There exists a keyboard shortcut for restoring the windows
back to their original position as well.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot" src="{{" title="site.url }}/assets/images/screencap.png" /&gt;&lt;/p&gt;
&lt;p&gt;The reason I chose this tool over other similar tools is that it allows for a
nice border around windows which I could not find with other tools. It's a
small point but I like to keep the look of OSX as much as possible and I feel
like non-fullscreen windows fits this bill.&lt;/p&gt;
&lt;h2&gt;Macvim&lt;/h2&gt;
&lt;p&gt;I mentioned that vim is my editor of choice, and macvim is the epitome of this
editor for OSX.&lt;/p&gt;
&lt;h2&gt;iTerm2&lt;/h2&gt;
&lt;p&gt;This is a great replacement for the Terminal.app that ships with OSX but
otherwise is a simple terminal emulator. It has nice support for profiles (e.g.
setting up an ssh link from a few keystrokes). &lt;/p&gt;
&lt;h2&gt;when-changed.py&lt;/h2&gt;
&lt;p&gt;This script watches for filesystem changes, and runs a simple command when
something is different.&lt;/p&gt;
&lt;p&gt;The command used for writing this blog post is as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;when-changed.py &lt;span class="k"&gt;$(&lt;/span&gt;find content -name &lt;span class="s1"&gt;&amp;#39;*.md&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; -c &lt;span class="s1"&gt;&amp;#39;fab build&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Any time I save the post, by build system (&lt;a href="http://fabfile.org"&gt;fabric&lt;/a&gt;)
recompiles the post so I can just reload the browser to see the changes.&lt;/p&gt;
&lt;h3&gt;Application to node&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://nodejs.org"&gt;node&lt;/a&gt; actually comes with a tool similar to
&lt;code&gt;when-changed.py&lt;/code&gt;, it's called &lt;code&gt;supervisor&lt;/code&gt;, and can be installed globally with
npm: &lt;code&gt;npm install --global supervisor&lt;/code&gt;. It can reload the server file with any
changes. I can edit it in one pane with macvim, and view the changes in the
browser by just reloading the page.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Bliss&lt;/em&gt;&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:my-job"&gt;
&lt;p&gt;I am currently working towards a PhD in astronomy, and very little
astronomy is done on Windows.&amp;#160;&lt;a class="footnote-backref" href="#fnref:my-job" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:nextstep"&gt;
&lt;p&gt;NeXTSTEP I believe&amp;#160;&lt;a class="footnote-backref" href="#fnref:nextstep" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="nodejs"></category><category term="OSX"></category><category term="productivity"></category></entry><entry><title>Nested gitignore files</title><link href="https://mindriot101.github.io/blog/2013/02/08/nested-gitignore-files/" rel="alternate"></link><updated>2013-02-08T11:39:10+01:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2013-02-08:blog/2013/02/08/nested-gitignore-files/</id><summary type="html">&lt;p&gt;Today I found out that .gitignore files can be nested.&lt;/p&gt;
&lt;p&gt;For example the directory tree&lt;/p&gt;
&lt;p&gt;a
a/b
.gitignore
a/b/.gitignore&lt;/p&gt;
&lt;p&gt;can have files in b ignored by a/b/.gitignore.&lt;/p&gt;
&lt;p&gt;This helps split the responsibility of ignoring files by topic and really helps organisation!&lt;/p&gt;</summary><category term="git"></category></entry><entry><title>Embedding Python in LaTeX</title><link href="https://mindriot101.github.io/blog/2013/02/05/embedding-python-in-latex/" rel="alternate"></link><updated>2013-02-05T11:38:00+01:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2013-02-05:blog/2013/02/05/embedding-python-in-latex/</id><summary type="html">&lt;p&gt;Combining Python with LaTeX is a powerful combination. It allows for arbitrary code to be executed which either gives the results of expressions, or can be used to embed programatically certain things e.g. the paths of files or images.&lt;/p&gt;
&lt;p&gt;By downloading python.sty and including it in a usepackage block, python code can be run.&lt;/p&gt;
&lt;p&gt;I was having trouble getting this to work as it seems I was using an invalid version of python.sty. The version linked above works as of the date of this post&lt;/p&gt;
&lt;p&gt;This must be compiled with latex/pdflatex and the -shell-escape option. Probably any latex compiler which supports this flag will do so probably luatex will support this, but I dont really see the point in embedding python in luatex compatible latex!&lt;/p&gt;
&lt;p&gt;I believe any python module thats available to the system python installation can be used, so the following will print the current directory the latex was compiled in&lt;/p&gt;
&lt;p&gt;An optional python script can be included with the compilation. A common usage is to import the modules required for the whole project, or to get some global variables&lt;/p&gt;</summary><category term="python"></category><category term="LaTeX"></category></entry><entry><title>Mac keyboard keys with Synergy</title><link href="https://mindriot101.github.io/blog/2012/08/06/mac-keyboard-keys-with-synergy/" rel="alternate"></link><updated>2012-08-06T17:21:28+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2012-08-06:blog/2012/08/06/mac-keyboard-keys-with-synergy/</id><summary type="html">&lt;p&gt;Synergy is a great program to control multiple computers from a single keyboard or mouse even without them being plugged in. The only requirement is that theyre on the same local network.&lt;/p&gt;
&lt;p&gt;Im sharing my configuration which has my windows desktop as the server, and my macbook as the client. Using a windows keyboard creates some issues with the macbook, so here are the settings I use to map the keys correctly:&lt;/p&gt;
&lt;p&gt;Shift - Shift
Ctrl - Ctrl
Alt - Meta
Meta - Meta
Super - Alt
Also I use the fix CAPSLOCK key setting.&lt;/p&gt;
&lt;p&gt;This gives the same control layout as my mac (ie I can operate the cmd key with my left thumb) whilst remaining compatible.&lt;/p&gt;</summary><category term="OSX"></category><category term="linux"></category></entry><entry><title>Vim is even more amazing than I first thought!</title><link href="https://mindriot101.github.io/blog/2012/06/08/vim-is-even-more-amazing-than-i-first-thought/" rel="alternate"></link><updated>2012-06-08T11:09:23+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2012-06-08:blog/2012/06/08/vim-is-even-more-amazing-than-i-first-thought/</id><summary type="html">&lt;p&gt;Just today thanks to this answer on SO, I realised that vim can automatically pipe text through a shell command.
Just think about that for a second
For a simple example you can write python code into a text file, and execute it which replaces the code with the result.&lt;/p&gt;
&lt;p&gt;for i in xrange(10):    print i&lt;/p&gt;
&lt;p&gt;Selecting this text with in visual mode (you should all know how to do this) and typing
!python
which will get replaced with
','!python
since youre in visual mode. This will replace the code written above with the numbers from 0 to 9.
This could even then be piped into eg. !sort -r to reverse the list.
A use Ive come up with is to pipe code into grep for data file formatting. Let me know any uses you have in the comments.&lt;/p&gt;</summary><category term="vim"></category></entry><entry><title>Cython: getting a vector from a numpy array</title><link href="https://mindriot101.github.io/blog/2011/11/11/cython-getting-a-vector-from-a-numpy-array/" rel="alternate"></link><updated>2011-11-11T12:05:21+01:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2011-11-11:blog/2011/11/11/cython-getting-a-vector-from-a-numpy-array/</id><summary type="html">&lt;p&gt;This is a problem that has been challenging me for a while: my c++ code uses vectors everywhere so how can I wrap these classes and functions into python easily? Ive tried many many times with e.g.  swig or boost::python to no avail. 
That is until today…&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;Thanks to the very kind people at Stack Overflow and this question in particular, I was able to create a wrapper function for Cython which does exactly what it says on the tin.The full code for the wrapper function is given here:&lt;/p&gt;
&lt;p&gt;{% highlight python %}
from libcpp.vector cimport vector
cimport numpy as np&lt;/p&gt;
&lt;h1&gt;Utility function to convert from numpy array to vector&lt;/h1&gt;
&lt;p&gt;cdef vector[double] arrayToVector(np.ndarray[np.double_t,ndim=1] array):
    cdef long size = array.size
    cdef vector[double] vec
    cdef long i
    for i in range(size):
        vec.push_back(array[i])&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;return vec
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;{% endhighlight %}&lt;/p&gt;
&lt;p&gt;I shall try and explain this now. Firstly the Cython vector library (libcpp.vector) contains a pre-wrapped vector class which is great but its incompatible with the numpy array class (hence why this is a problem!). Importing numpy (with cimport) at this stage is also required. 
The declaration is a little verbose for my liking (especially compared to python) but the argument is declared as a ndarray (the base class to array) with some templated parameters, using the square bracket notation in cython as opposed to the triangular bracket notation in c++. It shall hold double datatypes and it has only one dimension. The function also returns a double vector. It is safe to declare it with cdef as this will enable more optimisations and it wont need to be called directly from python anyway. 
I have yet to find a memcpy-type function in cython so I am then declaring the variables used (another Cython optimisation) and appending the array one value at a time into the created vector object. Finally I return the created vector ready to be used as an argument to an external c++ function.
The setup.py file is identical to wrapping any other c++ code and is documented well on the Cython website itself so I wont go into it here. 
Once I get more comfortable with the syntax I might try and write a templated version of the function, but for now I am content using the double version and writing another piece of code if I need eg. an integer function.&lt;/p&gt;</summary><category term="python"></category></entry><entry><title>OS X 10.7 Lion: my thoughts</title><link href="https://mindriot101.github.io/blog/2011/07/28/os-x-107-lion-my-thoughts/" rel="alternate"></link><updated>2011-07-28T11:57:00+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2011-07-28:blog/2011/07/28/os-x-107-lion-my-thoughts/</id><summary type="html">&lt;p&gt;My first OSX upgrade went well I think. My MacBook Pro is a Mid 2009 model, as the nice new About This Mac (not sure why this is capitalised but never mind) tells me.&lt;/p&gt;
&lt;p&gt;&lt;img alt="New about this mac window" src="http://media.tumblr.com/tumblr_lp1iaipQ3S1qh2v9o.png" /&gt;&lt;/p&gt;
&lt;p&gt;Ive never upgraded a Mac before since my pride and joy came with Snow Leopard installed, the as-of-then most up to date operating system so I had no idea what to expect. Ive been using my Mac for nearly two years now but before that I was a pretty heavy Windows user. My other tipple is Linux, so whatever it was like I was going to be tense and anxious. &lt;/p&gt;
&lt;!--more--&gt;

&lt;h2&gt;Upgrading&lt;/h2&gt;
&lt;p&gt;Initially, meeting my expectations almost exactly, the progress bar was stuck on 33 minutes remaining. Big surprise I thought so I did some googling and realised that there was a menu bar present at the installer screen. This is different I thought, and one of the forums I read mentioned viewing the install log. &lt;/p&gt;
&lt;p&gt;TIP: During the install, mouse over where the menu should be and click on Window - Show Log, or press ⌘L&lt;/p&gt;
&lt;p&gt;This saved my install and my sanity! I could see what the install process was doing. It was continuing luckily and after probably more than an hour - a lot more than the 33 minutes it originally predicted - I booted into a swish new Lion computer. Bonus marks here to Apple for making the install screen interactive and not just telling people about the exciting new things coming from the operating system. &lt;/p&gt;
&lt;p&gt;I did get a bit of a Windows pang when a whole host of screens popped up asking me to update this or remove that. Coupled with the Spotlight indexing that takes place rather extremely after the first boot, the system felt quite slow. Happily this sluggishness went away after a few minutes of leaving it alone so this is what I suspect all the claims of poor performance are based on. Typical internet users rushing to conclusions&lt;/p&gt;
&lt;h2&gt;New features&lt;/h2&gt;
&lt;p&gt;I am getting used to the natural scrolling direction, not sure whether Id actually call it natural especially since quite a lot of the time I use the mouse so iOSs scrolling direction doesnt make as much sense, but I heard some reports saying stick with it and it may become second nature, which seem to be true. I do like the fact that you can resize windows from any edge, a feature missing from Snow Leopard.&lt;/p&gt;
&lt;p&gt;Auto-restore is a feature probably designed with people who use word processors a lot in mind. When you close a document, OSX will re-open the closed windows next time you start the app. This works well for Pages or Word, but for example my LaTeX editor TeXShop would reopen with many many windows of the last document I was working on. This got a bit repetitive since there were (just counting…) 17 files, all of which would open when I start TeXShop. I might disable this feature.&lt;/p&gt;
&lt;p&gt;Mission control is a genius idea in my humble opinion. Considering I didnt use spaces that much before the upgrade, and I still dont, for me it is just a better Exposé. I instantly (and I mean instantly) removed the dashboard from it (System Preferences - Mission Control - Show Dashboard as a Space) since I never use the dashboard either, and it all works smoothly. The only gripe I can see is that you cannot use the keyboard for navigating apps. My linux background caused me to hate using the mouse as linux can essentially be controlled completely from the keyboard. Therefore ⌘-tab is my friend (or ⌘-~ for switching between app windows) so no keyboard use in Mission Control is a shame. Im pretty sure Exposé had it (though of course I cant check).&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mission Control" src="http://media.tumblr.com/tumblr_lp1iboOwiM1qh2v9o.png" /&gt;&lt;/p&gt;
&lt;p&gt;The fullscreen feature is an interesting one, it seems a good idea for a small screen like my MBP, but at the moment Im writing this on a 24 external monitor and the fullscreen apps dont work with a separate screen, and they just seem huge! I generally prefer to have apps on the same screen so I can ⌘-tab between them, for example coding and having the API documentation open in easy reach. I do like the idea of having for example full screen Mail or iCal when im using my MBP as a laptop but with two screens its not such a good idea. &lt;/p&gt;
&lt;p&gt;Oh and Launchpad is utterly useless as far as I can tell. &lt;/p&gt;
&lt;h2&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;Generally using my MacBook Pro has been a joy since the upgrade, everything runs well and definitely not slower than it used to. After having altered it to my liking, I have very similar performance and features than I used to have. &lt;/p&gt;
&lt;p&gt;So why upgrade if youve just tried to recreate Snow Leopard I hear you cry? &lt;/p&gt;
&lt;p&gt;Well there are some behind the scenes features that I like (the new style is much more subtle for example), and some obvious ones (Mission Control is definitely a plus) that have really made it worthwhile. I havent been able to investigate the fullscreen feature of apps since Ive mostly been using my external monitor but when Im on the move Im sure it will help a lot. &lt;/p&gt;
&lt;p&gt;Considering the price (~£20 in the UK) its very much worth the upgrade. &lt;/p&gt;</summary><category term="OSX"></category></entry><entry><title>Afloat for Mac OS X</title><link href="https://mindriot101.github.io/blog/2011/06/29/afloat-for-mac-os-x/" rel="alternate"></link><updated>2011-06-29T12:00:06+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2011-06-29:blog/2011/06/29/afloat-for-mac-os-x/</id><summary type="html">&lt;p&gt;After years of using Linux as my main system both at work and home, I got used to being able to drag windows by holding a keyboard combination and dragging with the left mouse button. The one disadvantage of the otherwise fantastic OS X is that despite being unix based, it did not have this feature. Having to drag a window by the very top bar got a little tedious, and resizing with the lower right handle was sometimes difficult.&lt;/p&gt;
&lt;p&gt;So now I’ve found a small free plugin for OS X called Afloat which performs this task[1] and many others too, including window transparency and making windows “always on top”.
So thanks very much to Infinite Labs for creating this application, and hopefully other many fine products.&lt;/p&gt;
&lt;p&gt;[1]: small caveat - it only works with Cocoa applications (safari, preview etc.) and not Carbon applications (Finder, iTunes)&lt;/p&gt;</summary><category term="osx"></category></entry><entry><title>Plotting unevenly gridded contour plots</title><link href="https://mindriot101.github.io/blog/2011/06/14/plotting-unevenly-gridded-contour-plots/" rel="alternate"></link><updated>2011-06-14T15:16:27+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2011-06-14:blog/2011/06/14/plotting-unevenly-gridded-contour-plots/</id><summary type="html">&lt;p&gt;Quite often at work I have to generate colour maps of certain things, which are generally not sampled evenly in coordinate space. I am also a huge fan of Python, so I thought to myself: can I combine these things? Well until now I didnt think you could. Matplotlibs contour plots require evenly spaced x and y points with z points to match. This is until I found a way&lt;/p&gt;
&lt;p&gt;This method is taken from example 2here, and is the way I do it now.&lt;/p&gt;
&lt;p&gt;Firstly generate an evenly spaced grid of your x and y data. The simplest way to do this is for data x and y:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;xi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;yi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The function that does the magic work is matplotlib.mlab.griddata and is based on Matlabs griddata function. It takes 5 parameters:&lt;/p&gt;
&lt;p&gt;the raw x and y values
the set of colour data (z)
the evenly spaced x and y values (xi and yi)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;zi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;matplotlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mlab&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;griddata&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;yi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This can now be used with plotting functions like contourf, eg.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contourf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;yi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;zi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="python"></category><category term="visualisation"></category></entry><entry><title>Installing IT++ on Mac OSX</title><link href="https://mindriot101.github.io/blog/2011/06/13/installing-it-on-mac-osx/" rel="alternate"></link><updated>2011-06-13T14:42:00+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2011-06-13:blog/2011/06/13/installing-it-on-mac-osx/</id><summary type="html">&lt;p&gt;IT++ (or itpp) is a library of Matlab-like functions. I was trying to install this as it contains a nice FastICA algorithm, but was having trouble compiling it on my laptop. I tried googling and found this, but it didn't work for me. &lt;/p&gt;
&lt;p&gt;My issue was that it was not linking to the ATLAS library, which I required for fast computation. IT++ installed without it, but I wanted these features, so after wading through many options, I managed to root out the problem.&lt;/p&gt;
&lt;p&gt;I have ATLAS installed through MacPorts, which is all well and good, but the software from there is 64 bit whereas all compilers on the Mac are 32 bit. This caused the configure script to fail with the wrong things. Instead of not being able to find ATLAS because it could not find the functions in the libraries, the compiler was failing to compile the file due to fortran cannot find symbol in architecture x86_64 type errors. &lt;/p&gt;
&lt;p&gt;After using the &lt;code&gt;F77=gfortran-mp-4.4&lt;/code&gt; which is the 64 bit macports fortran compiler, it managed to configure just fine. Just a warning: this is not the first time I've had strange cannot find symbol  errors even though I know Ive got the libraries installed. Almost all of my troubles are from fortran, reinforcing my hatred of the language. &lt;/p&gt;</summary><category term="OSX"></category><category term="itpp"></category></entry><entry><title>Android</title><link href="https://mindriot101.github.io/blog/2011/04/24/android/" rel="alternate"></link><updated>2011-04-24T12:10:13+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2011-04-24:blog/2011/04/24/android/</id><summary type="html">&lt;p&gt;Wow I never thought this day would come! Posting to the internet from a phone.&lt;/p&gt;
&lt;p&gt;My first phone was a nice brick as was typical at the time. I only turned it on to ring in emergencies, and probably never sent a text with it. After I started going out with my first girlfriend, I felt the need to get a slightly fancier phone, a Nokia 3210.&lt;/p&gt;
&lt;p&gt;A true classic, mostly due to the game snake which was all the rage at my school. I couldn't be left out so I did get a 3210, but as per usual I got to the game late so about two years after everyone else I finally had the greatest phone game of all time: snake!&lt;/p&gt;
&lt;p&gt;Anyway, fast forward to now, after spending years being behind the times, I have purchased an android smartphone and am typing this on it. Not the easiest thing ever but not too unpleasant! I never thought this day would come, and my hasn't technology moved on eh?!&lt;/p&gt;</summary><category term="android"></category></entry><entry><title>Tunneling to a remote machine via ssh</title><link href="https://mindriot101.github.io/blog/2011/04/08/tunneling-to-a-remote-machine-via-ssh/" rel="alternate"></link><updated>2011-04-08T13:57:00+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2011-04-08:blog/2011/04/08/tunneling-to-a-remote-machine-via-ssh/</id><summary type="html">&lt;p&gt;Update: For the most part, I want to tunnel from the server to the local machine. This only works with the localhostname set to localhost, for example to tunnel a mysql server to the current machine port 10101:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ssh -L 10101:localhost:3306 user@remoteserver.com -N
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The localhost is important, and in this case the mysql client (on the local machine) has to have the hostname set to 127.0.0.1 (for some reason localhost doesnt work). 
Ive been trying to access my works MySQL database from outside the universities firewall and was having issues. Im still having issues but thats another story: Ill get to that.
Some definitions: the local machine is my machine accessing the server from outside the firewall, and the server machine is the one running the server and is behind the firewall.
My initial test was to run a rails server (which runs on port 3000) on the server machine. It serves a basic test page just to show it works. 
To set up a tunnel, I used the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ssh -L localport:localhostname:remoteport user@remoteserver -N
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The -L means set up a tunnel, and -N means to not actually log in to the server. For this example I mapped port 3000 on the server machine to port 10101 on the local machine by running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ssh -L 10101:hostname:3000 user@remoteserver -N
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then went to my web browser and typed localhost:10101 and got a simple rails start page. Et voila!&lt;/p&gt;
&lt;p&gt;&lt;img alt="ssh tunnel" src="{{" title="site.url }}/assets/images/ssh-tunnel.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;To access my MySQL server, this worked ok but the permissions for my username had to be altered as me@localhost (from the tunnel) could not access the databases owned by me@remoteserver due to the changing username. This is a separate issue so I will sort this out later!&lt;/p&gt;</summary><category term="ssh"></category><category term="linux"></category></entry><entry><title>Graphics engines</title><link href="https://mindriot101.github.io/blog/2011/03/19/graphics-engines/" rel="alternate"></link><updated>2011-03-19T12:00:08+01:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2011-03-19:blog/2011/03/19/graphics-engines/</id><summary type="html">&lt;p&gt;Ive been looking into graphics engines recently, though this can only be a part time hobby for me since I should be doing my PhD work
Ive mostly been looking at two in particular:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ogre&lt;/li&gt;
&lt;li&gt;Irrlicht&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both of these seem to have some pros and cons, which I will be detailing in a second. I cannot decide which one I prefer though so maybe you can help me out? Comments are welcome.&lt;/p&gt;
&lt;h2&gt;Ogre&lt;/h2&gt;
&lt;p&gt;Lets start with this one. Perhaps the more fully featured engine, and used in some pretty famous games, it comes out of the box with some nice shader support and a great tutorial which is easy to follow and gets you creating a scene in no time at all.
This is one of my main problems though: the tutorial really hides all the workings of what actually goes on in the engine from the tutorial follower as its all contained in a TutorialApplication class which handles things like setting up a camera, and rendering the settings box and gui.
This is very nice to get a quick application going but doesnt really teach you anything about the API. I suppose this might be explained further in the tutorial but I never followed it that far (probably shouldnt admit that but never mind!).&lt;/p&gt;
&lt;h2&gt;Irrlicht&lt;/h2&gt;
&lt;p&gt;Had never heard of this one before I did some googling. It is less well known as far as I can tell, but still used in some highly commended games.
The nicest difference is the tutorial exposes all the code to the user, which can make the initial tutorials a little lacking in functionality (eg. no fps mouse controls) but helps you understand much more.
Comparison
Some differences in the use of the two engines are:
Transformations - Ogre uses quaternions, a rotation around a vector, whereas Irrlicht uses rotation matrices which are much easier to comprehend
Utility classes - Irrlicht has such things as vector3class T which call a templated function for class T. Ogre uses a built in (though it may be a typedef) Vector class.
I am planning on adding to this post as I find more differences and this is only a brief first impressions post, and I still cannot decide which I prefer!&lt;/p&gt;</summary><category term="gamedev"></category></entry><entry><title>Tumblr</title><link href="https://mindriot101.github.io/blog/2011/03/18/tumblr/" rel="alternate"></link><updated>2011-03-18T14:30:02+01:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2011-03-18:blog/2011/03/18/tumblr/</id><summary type="html">&lt;p&gt;Just joined tumblr to see what the fuss is about, mostly because of Notchs blog. Am getting bored of Wordpress as its interface is a little clunky (though powerful) so im giving this a go!
Lets see how this goes!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Edit: Sat 16 Feb 2013 17:53:46 GMT - this is obviously not the case at the moment, now I'm statically using this blog&lt;/em&gt;&lt;/p&gt;</summary><category term="blog"></category></entry><entry><title>Adding module imports to iPython startup</title><link href="https://mindriot101.github.io/blog/2011/01/12/adding-module-imports-to-ipython-startup/" rel="alternate"></link><updated>2011-01-12T10:19:00+01:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2011-01-12:blog/2011/01/12/adding-module-imports-to-ipython-startup/</id><summary type="html">&lt;p&gt;I'm constantly opening an iPython interpreter and having to import my
common modules (for me &lt;a href="http://www.stsci.edu/resources/software_hardware/pyfits"&gt;pyfits&lt;/a&gt; mostly).&lt;/p&gt;
&lt;p&gt;The easiest way to import modules on iPython startup is to look in your&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;~/.&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ipy_user_conf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;file which is a nice easy way to add python code into your ipython
startup (as opposed to the ipythonrc file which is about colours etc.).&lt;/p&gt;
&lt;p&gt;In the main function, just add a line such as&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;import pyfits&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will allow custom code to be run at startup. In this case, iPython
loads the pyfits module.&lt;/p&gt;
&lt;p&gt;You could add such things as&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;from pylab import *; x = arange(100); y = sin(x)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;for example if you were working with sine waves a lot.&lt;/p&gt;</summary><category term="python"></category><category term="ipython"></category></entry><entry><title>Flash blocker for safari</title><link href="https://mindriot101.github.io/blog/2010/12/27/flash-blocker-for-safari/" rel="alternate"></link><updated>2010-12-27T23:39:00+01:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2010-12-27:blog/2010/12/27/flash-blocker-for-safari/</id><summary type="html">&lt;p&gt;&lt;em&gt;Update:&lt;/em&gt; Wed 27 Feb 2013, since I'm updating this blog, chrome and firefox and safari all support this feature. &lt;/p&gt;
&lt;p&gt;Google Chrome has* one, Firefox has one but Safari does not... until
now!&lt;/p&gt;
&lt;p&gt;For me, having a manual "load flash only when I tell you to" button in a
web browser is a must. This reduces CPU usage on my mac which increases
battery life and stops it getting too hot. These are nice things to
have!&lt;/p&gt;
&lt;p&gt;I understand some people might not want such a feature, but I do so I
did some quick googling and came up with &lt;a href="http://clicktoflash.com/"&gt;http://clicktoflash.com/&lt;/a&gt;.
It creates a nice smooth looking flash image (shown below) which you
click to add the flash item itself.&lt;/p&gt;
&lt;p&gt;It also includes a whitelist for sites you know to be ok. Check it out
if you run safari on a mac (seeing as windows does not have this problem
- its only selling point really!)&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="{{" title="site.url }}/assets/img/flashblocker.png" /&gt;&lt;/p&gt;
&lt;p&gt;*had&lt;/p&gt;</summary><category term="OSX"></category></entry><entry><title>Restore Xcode startup panel</title><link href="https://mindriot101.github.io/blog/2010/12/22/restore-xcode-startup-panel/" rel="alternate"></link><updated>2010-12-22T16:52:00+01:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2010-12-22:blog/2010/12/22/restore-xcode-startup-panel/</id><summary type="html">&lt;p&gt;Ever selected the "do not show at startup" on the Xcode startup panel
and wish you could get it back? Simple. Go
to &lt;code&gt;~/Library/Preferences/com.apple.Xcode.plist&lt;/code&gt; and set the &lt;code&gt;XCShowSplashScreen&lt;/code&gt; to True.&lt;/p&gt;
&lt;p&gt;credit: &lt;a href="http://forums.macrumors.com/showthread.php?t=686540"&gt;here&lt;/a&gt;&lt;/p&gt;</summary><category term="OSX"></category></entry><entry><title>Synergy</title><link href="https://mindriot101.github.io/blog/2010/12/18/synergy/" rel="alternate"></link><updated>2010-12-18T16:44:00+01:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2010-12-18:blog/2010/12/18/synergy/</id><summary type="html">&lt;p&gt;I have recently been playing with the &lt;a href="http://forums.macrumors.com/showthread.php?t=686540"&gt;Synergy&lt;/a&gt; software, which allows
a single mouse and keyboard to control multiple computers whatever
operating system they may be using. I am currently using my PC's mouse
and keyboard to write this on my macbook pro!&lt;/p&gt;
&lt;p&gt;It's pretty easy to set up, the windows server is pretty simple, the
only bit the documentation does not emphasise enough is that the screens
must be named after the hostname of the computer, so for widows it's the
'Computer name' and for OSX/linux it's the output of the 'hostname'
command.  The linux and OSX client is command line only which is quite
annoying but otherwise a very nice piece of software.&lt;/p&gt;
&lt;p&gt;Oh and it's free!&lt;/p&gt;</summary><category term="synergy"></category><category term="linux"></category></entry><entry><title>Changing the rpath on a linux binary</title><link href="https://mindriot101.github.io/blog/2010/07/27/changing-the-rpath-on-a-linux-binary/" rel="alternate"></link><updated>2010-07-27T10:15:00+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2010-07-27:blog/2010/07/27/changing-the-rpath-on-a-linux-binary/</id><summary type="html">&lt;p&gt;&lt;a href="http://nixos.org/patchelf.html"&gt;PatchELF&lt;/a&gt; is a program that allows the patching of the rpath of a
linux binary to be whatever you want, even the printing of it.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;&lt;strong&gt;Short explanation:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Shared libraries are used in an operating system to allow the easy
updating of code and patch fixing to a large group of programs. With
static libraries, a patchfix to a library common to many programs would
force the recompilation of those programs. A fix to a shared library
could go on behind the scenes without these other programs even
realising (in the best case!).&lt;/p&gt;
&lt;p&gt;To accomodate for this functionality, shared libraries must be located
during runtime. There are three ways to do this (in order):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;System default paths&lt;/li&gt;
&lt;li&gt;The binaries &lt;em&gt;rpath&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;LD_LIBRARY_PATH&lt;/em&gt; enviroment variable&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Libraries found in stage 3 will override libraries found in stage 2 and
the same for 2-&gt;1. Because of this overriding, the &lt;em&gt;LD_LIBRARY_PATH&lt;/em&gt;
method is very dangerous, as the user can accidentally change this and
cause many programs to break.&lt;/p&gt;
&lt;p&gt;As far as the sysadmin is concerned, the best way to install new
software is to update the local database which contains the system
default paths, but for the developer who wishes to compile their own
programs, option 2 is the best.&lt;/p&gt;
&lt;p&gt;See my &lt;a href="{{ site.url }}/assets/Programming/linking-on-linux.md"&gt;previous post&lt;/a&gt; to see how to do this at compile time, but say
while developing a piece of software, you want to see what these paths
are or change them. This is where &lt;em&gt;PatchELF&lt;/em&gt; comes in handy. It allows
the printing of the &lt;em&gt;rpath&lt;/em&gt; variable or setting it to a completely new
location (eg. for testing against a custom version of the system
libraries).  It even allows the changing of the system default path
interpreter.&lt;/p&gt;
&lt;p&gt;For more information see &lt;a href="http://www.eyrie.org/~eagle/notes/rpath.html"&gt;this very informative post&lt;/a&gt;.&lt;/p&gt;</summary><category term="linux"></category><category term="c"></category></entry><entry><title>Linking on linux</title><link href="https://mindriot101.github.io/blog/2010/07/08/linking-on-linux/" rel="alternate"></link><updated>2010-07-08T15:24:00+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2010-07-08:blog/2010/07/08/linking-on-linux/</id><summary type="html">&lt;p&gt;I've just found out what some strange linking options mean with gcc!&lt;/p&gt;
&lt;p&gt;Quite often i've seen at the linking stage&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;gcc object.o -o executable.out -lsomelibrary -Wl,-rpath,somepath
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I've discovered that the -Wl,-rpath,somepath expands basically to&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;-Wl -rpath&lt;span class="o"&gt;=&lt;/span&gt;somepath
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and this means the location of the shared library in &lt;em&gt;somepath&lt;/em&gt; is hard
coded into the executable to be used at runtime. &lt;em&gt;rpath&lt;/em&gt; means runtime
path, all of which means the dangerous &lt;em&gt;LD_LIBRARY_PATH&lt;/em&gt; environment
variable is not needed.&lt;/p&gt;</summary><category term="linux"></category><category term="c"></category></entry><entry><title>Allowing the use of clang in qmake</title><link href="https://mindriot101.github.io/blog/2010/07/01/allowing-the-use-of-clang-in-qmake/" rel="alternate"></link><updated>2010-07-01T14:54:00+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2010-07-01:blog/2010/07/01/allowing-the-use-of-clang-in-qmake/</id><summary type="html">&lt;p&gt;Clang is an attempt at creating a gcc replacement front end for *nix
based systems with static code analysis and more helpful error messages
etc.&lt;/p&gt;
&lt;p&gt;To allow the use of the clang compiler, the easiest way is to create a 
new &lt;em&gt;mkspec&lt;/em&gt;, and create a Makefile with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;qmake -spec linux-clang
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;See the link at the end of this post for the original credit, and a
sample &lt;em&gt;mkspec&lt;/em&gt; file.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.freehackers.org/thomas/2010/01/10/playing-with-clang-and-qt/"&gt;Credit here&lt;/a&gt;&lt;/p&gt;</summary><category term="c"></category></entry><entry><title>Adam Buxton - alone in the shed</title><link href="https://mindriot101.github.io/blog/2010/06/24/adam-buxton-alone-in-the-shed/" rel="alternate"></link><updated>2010-06-24T20:58:00+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2010-06-24:blog/2010/06/24/adam-buxton-alone-in-the-shed/</id><summary type="html">&lt;iframe width="560" height="315" src="http://www.youtube.com/embed/k0QbyaN7E1E" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Nuff said...&lt;/p&gt;</summary></entry><entry><title>Turn of middle click page loading in Firefox</title><link href="https://mindriot101.github.io/blog/2010/06/23/turn-of-middle-click-page-loading-in-firefox/" rel="alternate"></link><updated>2010-06-23T13:09:00+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2010-06-23:blog/2010/06/23/turn-of-middle-click-page-loading-in-firefox/</id><summary type="html">&lt;p&gt;In linux, the middle mouse button by default pastes the contents of the
clipboard into something. If I had a penny for every time I've miss
middle-clicked a link and tried to open a url like "for \$file in
`ls`"...&lt;/p&gt;
&lt;p&gt;To disable this "feature", go to about:config in firefox then change&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;middlemouse.contentLoadURL -&gt; false&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This will disable middle-click url loading.&lt;/p&gt;</summary><category term="firefox"></category></entry><entry><title>Pinky and the Brain, Tongue Twister</title><link href="https://mindriot101.github.io/blog/2010/06/22/pinky-and-the-brain-tongue-twister/" rel="alternate"></link><updated>2010-06-22T21:13:00+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2010-06-22:blog/2010/06/22/pinky-and-the-brain-tongue-twister/</id><summary type="html">&lt;iframe width="420" height="315" src="//www.youtube.com/embed/eIu4fP4fOHE" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;This is a pretty awesome tongue twister! Also should be known the voice
of Brain is none other than the actor Maurice Lamarche, a voice actor
for Futurama and other programs. He did the voice of the "big brain"! Oh
the irony...&lt;/p&gt;</summary></entry><entry><title>Cliff on beer</title><link href="https://mindriot101.github.io/blog/2010/06/13/cliff-on-beer/" rel="alternate"></link><updated>2010-06-13T17:48:00+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2010-06-13:blog/2010/06/13/cliff-on-beer/</id><summary type="html">&lt;p&gt;&lt;img alt="Cliff on beer" src="http://i.imgur.com/79Mzg.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;So true!&lt;/p&gt;</summary></entry><entry><title>BBQ/World cup</title><link href="https://mindriot101.github.io/blog/2010/06/12/bbqworld-cup/" rel="alternate"></link><updated>2010-06-12T23:10:00+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2010-06-12:blog/2010/06/12/bbqworld-cup/</id><summary type="html">&lt;p&gt;Just been to a bbq at a friends house during which we watched the first
world cup 2010 game that we were involved in (England vs. USA). Twas
pretty rubbish really, 1-1 end score plus a complete fumble by the
England goalkeeper. Not exactly decisive!&lt;/p&gt;
&lt;p&gt;Anway the bbq was good, ate too much as per usual but got to play some
footy in the park. In all a good night.&lt;/p&gt;</summary></entry></feed>