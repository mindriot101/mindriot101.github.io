<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>circularspace</title><link href="https://mindriot101.github.io/" rel="alternate"></link><link href="https://mindriot101.github.io/feeds/tag_osx.xml" rel="self"></link><id>https://mindriot101.github.io/</id><updated>2013-09-05T15:44:00+02:00</updated><entry><title>vim crashing with ruby on OSX</title><link href="https://mindriot101.github.io/blog/2013/09/05/vim-crashing-with-ruby-on-osx/" rel="alternate"></link><updated>2013-09-05T15:44:00+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2013-09-05:blog/2013/09/05/vim-crashing-with-ruby-on-osx/</id><summary type="html">&lt;p&gt;I started having trouble with vim crashing for me. I'm on OSX with homebrew and rbenv, and it crashed when editing Ruby files. I would get a segmentation fault. &lt;/p&gt;
&lt;p&gt;After some googling which was not particularly fruitful, the solution I came up with was:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;switch to the system ruby &lt;code&gt;rbenv shell system&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;uninstall vim completely with homebrew &lt;code&gt;brew uninstall vim&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;reinstall vim from head &lt;code&gt;brew install --HEAD --override-system-vi vim&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This seems to have fixed the problem, though I do not know if it was switching to the system ruby or installing from head. This may require extra study which I do not have time to do now.&lt;/p&gt;</summary><category term="osx"></category><category term="vim"></category><category term="ruby"></category></entry><entry><title>cello voice</title><link href="https://mindriot101.github.io/blog/2013/08/24/cello-voice/" rel="alternate"></link><updated>2013-08-24T12:05:00+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2013-08-24:blog/2013/08/24/cello-voice/</id><summary type="html">&lt;p&gt;So Mac OSX has the &lt;code&gt;say&lt;/code&gt; command, which reads out some text in the computers voice synthesis functionality. This is old news.&lt;/p&gt;
&lt;p&gt;The new hotness is switching into the "cello" voice with &lt;code&gt;say -v cello&lt;/code&gt;. I's lyrical and beautiful, though reading out file names is entertaining:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;say -v cello source/_posts/2013-08-24-cello-voice.markdown
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This was brought to my attention through the &lt;code&gt;guard-shell&lt;/code&gt; gem &lt;a href="https://github.com/guard/guard-shell#saying-the-name-of-the-file-you-changed-and-displaying-a-notification"&gt;README&lt;/a&gt;.&lt;/p&gt;</summary><category term="OSX"></category></entry><entry><title>Installing development version of nginx with Homebrew</title><link href="https://mindriot101.github.io/blog/2013/02/25/installing-development-version-of-nginx-with-homebrew/" rel="alternate"></link><updated>2013-02-25T00:00:00+01:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2013-02-25:blog/2013/02/25/installing-development-version-of-nginx-with-homebrew/</id><summary type="html">&lt;p&gt;I have been trying to install nginx v1.3.x on my Macbook Pro for a while now to test the native &lt;a href="https://nginx.com/news/nginx-websockets.html"&gt;websockets support&lt;/a&gt; but I could not find a way to install version 1.3.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;I had a look with &lt;code&gt;brew info nginx&lt;/code&gt; and found a clue: a devel flag:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;formula&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Nginx&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Formula&lt;/span&gt;
    &lt;span class="c1"&gt;# Other code&lt;/span&gt;

    &lt;span class="n"&gt;devel&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://nginx.org/download/nginx-1.3.13.tar.gz&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;sha1&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b09b1c35b2b741292d41db1caa3b8a4123805a4c&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# Other code&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I should really have found this earlier or tried to look harder, but it turns out homebrew has a &lt;code&gt;--devel&lt;/code&gt; flag for the install command. This defines the &lt;code&gt;devel&lt;/code&gt; variable and is caught by the if block above.&lt;/p&gt;
&lt;p&gt;So simple really, but I googled to no avail, so hopefully this post will come up for anyone else who has this problem.&lt;/p&gt;</summary><category term="homebrew"></category><category term="OSX"></category><category term="nginx"></category></entry><entry><title>(node) development on OSX</title><link href="https://mindriot101.github.io/blog/2013/02/24/node-development-on-osx/" rel="alternate"></link><updated>2013-02-24T00:00:00+01:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2013-02-24:blog/2013/02/24/node-development-on-osx/</id><summary type="html">&lt;p&gt;I love my Macbook Pro, for development and general computing use. Before I
purchased it I was a die hard linux user (apart from gaming which is still
dominated by windows unfortunately.) My work involves linux&lt;sup id="fnref:my-job"&gt;&lt;a class="footnote-ref" href="#fn:my-job" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; and I am a
committed &lt;a href="https://vim.org"&gt;vim&lt;/a&gt; user. &lt;/p&gt;
&lt;p&gt;My work colleagues tend to laugh when I say that I want to use my mouse as
little as possible, and that I am quite experienced in command line use. It
pains me every time I see my office mates reach over to the mouse to click the
&lt;em&gt;save&lt;/em&gt; button.&lt;/p&gt;
&lt;p&gt;This workflow does not translate too well to the Mac; as far as I understand it
Apple&lt;sup id="fnref:nextstep"&gt;&lt;a class="footnote-ref" href="#fn:nextstep" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; were one of the first companies to introduce guis for their
operating systems.&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;On the other hand I love the user interface, operating system and window/font
rendering systems. It's quality hardware and a fantastic (IMO) keyboard,
coupled with excellent software and makes me feel really good using it. It's
become my main operating system at work now since I code almost exclusively on
my macbook. Occasionally I have to SSH into the work computers to access data
but usually this is from my laptop.&lt;/p&gt;
&lt;p&gt;I also like automation.&lt;/p&gt;
&lt;p&gt;During (node) development I much prefer editing code in my editor and either
seeing it instantly in my browser, or just reloading it myself. For this and
other development, I use a few tools:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://brew.sh"&gt;Homebrew&lt;/a&gt; for package installation&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.boastr.net/?page_id=2342"&gt;Better snap tool&lt;/a&gt; for tiling windows
  side by side&lt;/li&gt;
&lt;li&gt;&lt;a href="https://code.google.com/p/macvim/"&gt;Macvim&lt;/a&gt; for editing, &lt;code&gt;brew install macvim&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.iterm2.com"&gt;iTerm2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/joh/when-changed"&gt;when-changed.py&lt;/a&gt; for
  compiling/running/whatever when files have changed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'll discuss these tools in turn.&lt;/p&gt;
&lt;h2&gt;Homebrew&lt;/h2&gt;
&lt;p&gt;Linux has it's share of problems, which should be classed as more &lt;em&gt;challenges&lt;/em&gt;
than problems as it's fun I assure you. On the other hand it's package
management system is top notch. The Mac OSX equivalent is Homebrew and is
superbly managed with packages on &lt;a href="https://github.com"&gt;github&lt;/a&gt;. This takes the
difficulty out of installing a lot of packages, but is still missing some nice
features.&lt;/p&gt;
&lt;p&gt;The nice thing about Linux's package management is that the packages are
&lt;em&gt;binary&lt;/em&gt; packages, so no compilation is required. They are compiled by someone
with extensive knowledge of the package and operating system - usually the
package maintainer. Packages on Mac OSX still have to be compiled from source
so can take a long time.&lt;/p&gt;
&lt;h2&gt;Better snap tool&lt;/h2&gt;
&lt;p&gt;Having multiple windows open simultaneously is a huge timesaver as you can see
the contents simultaneously. Having multiple monitors is a fantastic but
expensive option, but if on a single window you could resize the windows
yourself but this can be time consuming if it needs to be done many times.&lt;/p&gt;
&lt;p&gt;This tool allows some keyboard shortcuts to resize the windows to take up half
the screen each. There exists a keyboard shortcut for restoring the windows
back to their original position as well.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Screenshot" src="{{" title="site.url }}/assets/images/screencap.png" /&gt;&lt;/p&gt;
&lt;p&gt;The reason I chose this tool over other similar tools is that it allows for a
nice border around windows which I could not find with other tools. It's a
small point but I like to keep the look of OSX as much as possible and I feel
like non-fullscreen windows fits this bill.&lt;/p&gt;
&lt;h2&gt;Macvim&lt;/h2&gt;
&lt;p&gt;I mentioned that vim is my editor of choice, and macvim is the epitome of this
editor for OSX.&lt;/p&gt;
&lt;h2&gt;iTerm2&lt;/h2&gt;
&lt;p&gt;This is a great replacement for the Terminal.app that ships with OSX but
otherwise is a simple terminal emulator. It has nice support for profiles (e.g.
setting up an ssh link from a few keystrokes). &lt;/p&gt;
&lt;h2&gt;when-changed.py&lt;/h2&gt;
&lt;p&gt;This script watches for filesystem changes, and runs a simple command when
something is different.&lt;/p&gt;
&lt;p&gt;The command used for writing this blog post is as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;when-changed.py &lt;span class="k"&gt;$(&lt;/span&gt;find content -name &lt;span class="s1"&gt;&amp;#39;*.md&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; -c &lt;span class="s1"&gt;&amp;#39;fab build&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Any time I save the post, by build system (&lt;a href="https://fabfile.org"&gt;fabric&lt;/a&gt;)
recompiles the post so I can just reload the browser to see the changes.&lt;/p&gt;
&lt;h3&gt;Application to node&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://nodejs.org"&gt;node&lt;/a&gt; actually comes with a tool similar to
&lt;code&gt;when-changed.py&lt;/code&gt;, it's called &lt;code&gt;supervisor&lt;/code&gt;, and can be installed globally with
npm: &lt;code&gt;npm install --global supervisor&lt;/code&gt;. It can reload the server file with any
changes. I can edit it in one pane with macvim, and view the changes in the
browser by just reloading the page.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Bliss&lt;/em&gt;&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:my-job"&gt;
&lt;p&gt;I am currently working towards a PhD in astronomy, and very little
astronomy is done on Windows.&amp;#160;&lt;a class="footnote-backref" href="#fnref:my-job" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:nextstep"&gt;
&lt;p&gt;NeXTSTEP I believe&amp;#160;&lt;a class="footnote-backref" href="#fnref:nextstep" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="nodejs"></category><category term="OSX"></category><category term="productivity"></category></entry><entry><title>Mac keyboard keys with Synergy</title><link href="https://mindriot101.github.io/blog/2012/08/06/mac-keyboard-keys-with-synergy/" rel="alternate"></link><updated>2012-08-06T17:21:28+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2012-08-06:blog/2012/08/06/mac-keyboard-keys-with-synergy/</id><summary type="html">&lt;p&gt;Synergy is a great program to control multiple computers from a single keyboard or mouse even without them being plugged in. The only requirement is that theyre on the same local network.&lt;/p&gt;
&lt;p&gt;Im sharing my configuration which has my windows desktop as the server, and my macbook as the client. Using a windows keyboard creates some issues with the macbook, so here are the settings I use to map the keys correctly:&lt;/p&gt;
&lt;p&gt;Shift - Shift
Ctrl - Ctrl
Alt - Meta
Meta - Meta
Super - Alt
Also I use the fix CAPSLOCK key setting.&lt;/p&gt;
&lt;p&gt;This gives the same control layout as my mac (ie I can operate the cmd key with my left thumb) whilst remaining compatible.&lt;/p&gt;</summary><category term="OSX"></category><category term="linux"></category></entry><entry><title>OS X 10.7 Lion: my thoughts</title><link href="https://mindriot101.github.io/blog/2011/07/28/os-x-107-lion-my-thoughts/" rel="alternate"></link><updated>2011-07-28T11:57:00+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2011-07-28:blog/2011/07/28/os-x-107-lion-my-thoughts/</id><summary type="html">&lt;p&gt;My first OSX upgrade went well I think. My MacBook Pro is a Mid 2009 model, as the nice new About This Mac (not sure why this is capitalised but never mind) tells me.&lt;/p&gt;
&lt;p&gt;&lt;img alt="New about this mac window" src="https://media.tumblr.com/tumblr_lp1iaipQ3S1qh2v9o.png" /&gt;&lt;/p&gt;
&lt;p&gt;Ive never upgraded a Mac before since my pride and joy came with Snow Leopard installed, the as-of-then most up to date operating system so I had no idea what to expect. Ive been using my Mac for nearly two years now but before that I was a pretty heavy Windows user. My other tipple is Linux, so whatever it was like I was going to be tense and anxious. &lt;/p&gt;
&lt;!--more--&gt;

&lt;h2&gt;Upgrading&lt;/h2&gt;
&lt;p&gt;Initially, meeting my expectations almost exactly, the progress bar was stuck on 33 minutes remaining. Big surprise I thought so I did some googling and realised that there was a menu bar present at the installer screen. This is different I thought, and one of the forums I read mentioned viewing the install log. &lt;/p&gt;
&lt;p&gt;TIP: During the install, mouse over where the menu should be and click on Window - Show Log, or press ⌘L&lt;/p&gt;
&lt;p&gt;This saved my install and my sanity! I could see what the install process was doing. It was continuing luckily and after probably more than an hour - a lot more than the 33 minutes it originally predicted - I booted into a swish new Lion computer. Bonus marks here to Apple for making the install screen interactive and not just telling people about the exciting new things coming from the operating system. &lt;/p&gt;
&lt;p&gt;I did get a bit of a Windows pang when a whole host of screens popped up asking me to update this or remove that. Coupled with the Spotlight indexing that takes place rather extremely after the first boot, the system felt quite slow. Happily this sluggishness went away after a few minutes of leaving it alone so this is what I suspect all the claims of poor performance are based on. Typical internet users rushing to conclusions&lt;/p&gt;
&lt;h2&gt;New features&lt;/h2&gt;
&lt;p&gt;I am getting used to the natural scrolling direction, not sure whether Id actually call it natural especially since quite a lot of the time I use the mouse so iOSs scrolling direction doesnt make as much sense, but I heard some reports saying stick with it and it may become second nature, which seem to be true. I do like the fact that you can resize windows from any edge, a feature missing from Snow Leopard.&lt;/p&gt;
&lt;p&gt;Auto-restore is a feature probably designed with people who use word processors a lot in mind. When you close a document, OSX will re-open the closed windows next time you start the app. This works well for Pages or Word, but for example my LaTeX editor TeXShop would reopen with many many windows of the last document I was working on. This got a bit repetitive since there were (just counting…) 17 files, all of which would open when I start TeXShop. I might disable this feature.&lt;/p&gt;
&lt;p&gt;Mission control is a genius idea in my humble opinion. Considering I didnt use spaces that much before the upgrade, and I still dont, for me it is just a better Exposé. I instantly (and I mean instantly) removed the dashboard from it (System Preferences - Mission Control - Show Dashboard as a Space) since I never use the dashboard either, and it all works smoothly. The only gripe I can see is that you cannot use the keyboard for navigating apps. My linux background caused me to hate using the mouse as linux can essentially be controlled completely from the keyboard. Therefore ⌘-tab is my friend (or ⌘-~ for switching between app windows) so no keyboard use in Mission Control is a shame. Im pretty sure Exposé had it (though of course I cant check).&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mission Control" src="https://media.tumblr.com/tumblr_lp1iboOwiM1qh2v9o.png" /&gt;&lt;/p&gt;
&lt;p&gt;The fullscreen feature is an interesting one, it seems a good idea for a small screen like my MBP, but at the moment Im writing this on a 24 external monitor and the fullscreen apps dont work with a separate screen, and they just seem huge! I generally prefer to have apps on the same screen so I can ⌘-tab between them, for example coding and having the API documentation open in easy reach. I do like the idea of having for example full screen Mail or iCal when im using my MBP as a laptop but with two screens its not such a good idea. &lt;/p&gt;
&lt;p&gt;Oh and Launchpad is utterly useless as far as I can tell. &lt;/p&gt;
&lt;h2&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;Generally using my MacBook Pro has been a joy since the upgrade, everything runs well and definitely not slower than it used to. After having altered it to my liking, I have very similar performance and features than I used to have. &lt;/p&gt;
&lt;p&gt;So why upgrade if youve just tried to recreate Snow Leopard I hear you cry? &lt;/p&gt;
&lt;p&gt;Well there are some behind the scenes features that I like (the new style is much more subtle for example), and some obvious ones (Mission Control is definitely a plus) that have really made it worthwhile. I havent been able to investigate the fullscreen feature of apps since Ive mostly been using my external monitor but when Im on the move Im sure it will help a lot. &lt;/p&gt;
&lt;p&gt;Considering the price (~£20 in the UK) its very much worth the upgrade. &lt;/p&gt;</summary><category term="OSX"></category></entry><entry><title>Afloat for Mac OS X</title><link href="https://mindriot101.github.io/blog/2011/06/29/afloat-for-mac-os-x/" rel="alternate"></link><updated>2011-06-29T12:00:06+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2011-06-29:blog/2011/06/29/afloat-for-mac-os-x/</id><summary type="html">&lt;p&gt;After years of using Linux as my main system both at work and home, I got used to being able to drag windows by holding a keyboard combination and dragging with the left mouse button. The one disadvantage of the otherwise fantastic OS X is that despite being unix based, it did not have this feature. Having to drag a window by the very top bar got a little tedious, and resizing with the lower right handle was sometimes difficult.&lt;/p&gt;
&lt;p&gt;So now I’ve found a small free plugin for OS X called Afloat which performs this task[1] and many others too, including window transparency and making windows “always on top”.
So thanks very much to Infinite Labs for creating this application, and hopefully other many fine products.&lt;/p&gt;
&lt;p&gt;[1]: small caveat - it only works with Cocoa applications (safari, preview etc.) and not Carbon applications (Finder, iTunes)&lt;/p&gt;</summary><category term="osx"></category></entry><entry><title>Installing IT++ on Mac OSX</title><link href="https://mindriot101.github.io/blog/2011/06/13/installing-it-on-mac-osx/" rel="alternate"></link><updated>2011-06-13T14:42:00+02:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2011-06-13:blog/2011/06/13/installing-it-on-mac-osx/</id><summary type="html">&lt;p&gt;IT++ (or itpp) is a library of Matlab-like functions. I was trying to install this as it contains a nice FastICA algorithm, but was having trouble compiling it on my laptop. I tried googling and found this, but it didn't work for me. &lt;/p&gt;
&lt;p&gt;My issue was that it was not linking to the ATLAS library, which I required for fast computation. IT++ installed without it, but I wanted these features, so after wading through many options, I managed to root out the problem.&lt;/p&gt;
&lt;p&gt;I have ATLAS installed through MacPorts, which is all well and good, but the software from there is 64 bit whereas all compilers on the Mac are 32 bit. This caused the configure script to fail with the wrong things. Instead of not being able to find ATLAS because it could not find the functions in the libraries, the compiler was failing to compile the file due to fortran cannot find symbol in architecture x86_64 type errors. &lt;/p&gt;
&lt;p&gt;After using the &lt;code&gt;F77=gfortran-mp-4.4&lt;/code&gt; which is the 64 bit macports fortran compiler, it managed to configure just fine. Just a warning: this is not the first time I've had strange cannot find symbol  errors even though I know Ive got the libraries installed. Almost all of my troubles are from fortran, reinforcing my hatred of the language. &lt;/p&gt;</summary><category term="OSX"></category><category term="itpp"></category></entry><entry><title>Flash blocker for safari</title><link href="https://mindriot101.github.io/blog/2010/12/27/flash-blocker-for-safari/" rel="alternate"></link><updated>2010-12-27T23:39:00+01:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2010-12-27:blog/2010/12/27/flash-blocker-for-safari/</id><summary type="html">&lt;p&gt;&lt;em&gt;Update:&lt;/em&gt; Wed 27 Feb 2013, since I'm updating this blog, chrome and firefox and safari all support this feature. &lt;/p&gt;
&lt;p&gt;Google Chrome has* one, Firefox has one but Safari does not... until
now!&lt;/p&gt;
&lt;p&gt;For me, having a manual "load flash only when I tell you to" button in a
web browser is a must. This reduces CPU usage on my mac which increases
battery life and stops it getting too hot. These are nice things to
have!&lt;/p&gt;
&lt;p&gt;I understand some people might not want such a feature, but I do so I
did some quick googling and came up with &lt;a href="https://clicktoflash.com/"&gt;https://clicktoflash.com/&lt;/a&gt;.
It creates a nice smooth looking flash image (shown below) which you
click to add the flash item itself.&lt;/p&gt;
&lt;p&gt;It also includes a whitelist for sites you know to be ok. Check it out
if you run safari on a mac (seeing as windows does not have this problem
- its only selling point really!)&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="{{" title="site.url }}/assets/img/flashblocker.png" /&gt;&lt;/p&gt;
&lt;p&gt;*had&lt;/p&gt;</summary><category term="OSX"></category></entry><entry><title>Restore Xcode startup panel</title><link href="https://mindriot101.github.io/blog/2010/12/22/restore-xcode-startup-panel/" rel="alternate"></link><updated>2010-12-22T16:52:00+01:00</updated><author><name>Simon Walker</name></author><id>tag:mindriot101.github.io,2010-12-22:blog/2010/12/22/restore-xcode-startup-panel/</id><summary type="html">&lt;p&gt;Ever selected the "do not show at startup" on the Xcode startup panel
and wish you could get it back? Simple. Go
to &lt;code&gt;~/Library/Preferences/com.apple.Xcode.plist&lt;/code&gt; and set the &lt;code&gt;XCShowSplashScreen&lt;/code&gt; to True.&lt;/p&gt;
&lt;p&gt;credit: &lt;a href="https://forums.macrumors.com/showthread.php?t=686540"&gt;here&lt;/a&gt;&lt;/p&gt;</summary><category term="OSX"></category></entry></feed>